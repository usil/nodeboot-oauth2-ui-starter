{"hash":"1f015050925f959e59fc030a48f06a8324eab415","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, Input, NgModule } from '@angular/core';\nimport { first } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i6 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MatDialogModule, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i3 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i2 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from '@angular/material/divider';\nimport * as i7 from '@angular/material/core';\n\nclass NodebootOauth2StarterService {\r\n    constructor(http, configuration) {\r\n        this.http = http;\r\n        this.configuration = configuration;\r\n        this.authUserApi = configuration.api + '/auth/user';\r\n        this.authRoleApi = configuration.api + '/auth/role';\r\n    }\r\n    getUsers(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authUserApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    createUser(createUserData) {\r\n        return this.http.post(this.authUserApi, createUserData).pipe(first());\r\n    }\r\n    updatePassword(userId, newPassword, oldPassword) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/password`, {\r\n            newPassword,\r\n            oldPassword,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    updateUserRoles(userId, roles) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/role`, { roles })\r\n            .pipe(first());\r\n    }\r\n    deleteUser(subjectId) {\r\n        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\r\n    }\r\n    updateUser(subjectId, updateBody) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${subjectId}`, updateBody)\r\n            .pipe(first());\r\n    }\r\n    getUserProfile() {\r\n        return this.http\r\n            .get(`${this.authUserApi}/profile/me`)\r\n            .pipe(first());\r\n    }\r\n    getRolesBasic() {\r\n        return this.http\r\n            .get(this.authRoleApi + '?basic=true')\r\n            .pipe(first());\r\n    }\r\n    createRole(identifier, allowedObject) {\r\n        return this.http\r\n            .post(this.authRoleApi, { identifier, allowedObject })\r\n            .pipe(first());\r\n    }\r\n    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {\r\n        return this.http\r\n            .put(this.authRoleApi + `/${roleId}/option`, {\r\n            newAllowedObject,\r\n            originalAllowedObject,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    deleteRole(roleId) {\r\n        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\r\n    }\r\n    getRoles(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authRoleApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    get apiUrl() {\r\n        return this.configuration.api;\r\n    }\r\n}\r\nNodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['configuration']\r\n                }] }]; } });\n\nclass NodebootOauth2StarterComponent {\r\n    constructor(nbService) {\r\n        this.nbService = nbService;\r\n        this.testTextT = this.nbService.apiUrl;\r\n    }\r\n    ngOnInit() { }\r\n}\r\nNodebootOauth2StarterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, deps: [{ token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodebootOauth2StarterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NodebootOauth2StarterComponent, selector: \"lib-nodeboot-oauth2-starter\", inputs: { otherText: \"otherText\" }, ngImport: i0, template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-nodeboot-oauth2-starter', template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }]; }, propDecorators: { otherText: [{\r\n                type: Input\r\n            }] } });\n\nclass LibraryMaterials {\r\n}\r\nLibraryMaterials.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nLibraryMaterials.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, exports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\nLibraryMaterials.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, imports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [\r\n                        MatToolbarModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                        MatSidenavModule,\r\n                        MatListModule,\r\n                        MatGridListModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule,\r\n                        MatSelectModule,\r\n                        MatTableModule,\r\n                        MatSortModule,\r\n                        MatMenuModule,\r\n                        MatPaginatorModule,\r\n                        MatProgressSpinnerModule,\r\n                        MatDialogModule,\r\n                        MatListModule,\r\n                        MatExpansionModule,\r\n                        MatTooltipModule,\r\n                    ],\r\n                }]\r\n        }] });\n\n// import { CreateUserComponent } from './create-user/create-user.component';\r\n// import { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\r\n// import { DeleteUserComponent } from './delete-user/delete-user.component';\r\n// import { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\r\n// import { UpdateUserComponent } from './update-user/update-user.component';\r\nclass OauthStarterUsersComponent {\r\n    // users!: User[];\r\n    // errorMessage!: string | undefined;\r\n    // displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\r\n    // resultsLength = 0;\r\n    // isLoadingResults = true;\r\n    // reload = new BehaviorSubject<number>(0);\r\n    // userDataSubscription!: Subscription;\r\n    // @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n    // @ViewChild(MatSort) sort!: MatSort;\r\n    constructor() { }\r\n}\r\nOauthStarterUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUsersComponent, selector: \"lib-oauth-starter-users\", ngImport: i0, template: \"<!-- <div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div> -->\\n\", styles: [\"\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-users', template: \"<!-- <div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div> -->\\n\", styles: [\"\"] }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass ViewUserRolesComponent {\r\n    constructor(dialogRef, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.user = user;\r\n        this.userTitle = `${user.name} roles`;\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    ngOnInit() { }\r\n}\r\nViewUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nViewUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ViewUserRolesComponent, selector: \"lib-view-user-roles\", ngImport: i0, template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i4.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { type: i6.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i3.MatListSubheaderCssMatStyler, selector: \"[mat-subheader], [matSubheader]\" }, { type: i3.MatListIconCssMatStyler, selector: \"[mat-list-icon], [matListIcon]\" }, { type: i7.MatLine, selector: \"[mat-line], [matLine]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-view-user-roles', template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass NodebootOauth2StarterModule {\r\n}\r\nNodebootOauth2StarterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNodebootOauth2StarterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, declarations: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        ViewUserRolesComponent], imports: [LibraryMaterials,\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NodebootOauth2StarterComponent] });\r\nNodebootOauth2StarterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, imports: [[\r\n            LibraryMaterials,\r\n            HttpClientModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        ViewUserRolesComponent,\r\n                    ],\r\n                    imports: [\r\n                        LibraryMaterials,\r\n                        HttpClientModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                    ],\r\n                    exports: [NodebootOauth2StarterComponent],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of nodeboot-oauth2-starter\r\n */\r\n// export * from './lib/oauth-starter-users/oauth-starter-users.component';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NodebootOauth2StarterComponent, NodebootOauth2StarterModule, NodebootOauth2StarterService };\n//# sourceMappingURL=nodeboot-oauth2-starter.mjs.map\n","map":{"version":3,"file":"nodeboot-oauth2-starter.mjs","sources":["../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.service.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/material.module.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.module.ts","../../../projects/nodeboot-oauth2-starter/src/public-api.ts","../../../projects/nodeboot-oauth2-starter/src/nodeboot-oauth2-starter.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, first } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NodebootOauth2StarterService {\n  configuration: {\n    api: string;\n  };\n  authUserApi: string;\n  authRoleApi: string;\n  constructor(\n    private http: HttpClient,\n    @Inject('configuration')\n    configuration: {\n      api: string;\n    }\n  ) {\n    this.configuration = configuration;\n    this.authUserApi = configuration.api + '/auth/user';\n    this.authRoleApi = configuration.api + '/auth/role';\n  }\n\n  getUsers(pageIndex: number, order: string): Observable<UserPaginationResult> {\n    return this.http\n      .get<UserPaginationResult>(\n        this.authUserApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    roles: BasicRole[];\n  }) {\n    return this.http.post(this.authUserApi, createUserData).pipe(first());\n  }\n\n  updatePassword(userId: number, newPassword: string, oldPassword: string) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/password`, {\n        newPassword,\n        oldPassword,\n      })\n      .pipe(first());\n  }\n\n  updateUserRoles(userId: number, roles: BasicRole[]) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/role`, { roles })\n      .pipe(first());\n  }\n\n  deleteUser(subjectId: number) {\n    return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\n  }\n\n  updateUser(subjectId: number, updateBody: UserUpdateBody) {\n    return this.http\n      .put(`${this.authUserApi}/${subjectId}`, updateBody)\n      .pipe(first());\n  }\n\n  getUserProfile(): Observable<UserProfileResult> {\n    return this.http\n      .get<UserProfileResult>(`${this.authUserApi}/profile/me`)\n      .pipe(first());\n  }\n\n  getRolesBasic(): Observable<RoleResult> {\n    return this.http\n      .get<RoleResult>(this.authRoleApi + '?basic=true')\n      .pipe(first());\n  }\n\n  createRole(identifier: string, allowedObject: Record<string, Option[]>) {\n    return this.http\n      .post(this.authRoleApi, { identifier, allowedObject })\n      .pipe(first());\n  }\n\n  updateRoleOptions(\n    roleId: number,\n    newAllowedObject: Record<string, Option[]>,\n    originalAllowedObject: Record<string, Option[]>\n  ) {\n    return this.http\n      .put(this.authRoleApi + `/${roleId}/option`, {\n        newAllowedObject,\n        originalAllowedObject,\n      })\n      .pipe(first());\n  }\n\n  deleteRole(roleId: number) {\n    return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\n  }\n\n  getRoles(pageIndex: number, order: string): Observable<RolePaginationResult> {\n    return this.http\n      .get<RolePaginationResult>(\n        this.authRoleApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  get apiUrl() {\n    return this.configuration.api;\n  }\n}\n\nexport interface UserUpdateBody {\n  name: string;\n}\n\ninterface UserPaginationResult {\n  message: string;\n  code: number;\n  content?: PaginationUserContent;\n}\n\ninterface UserProfileResult {\n  message: string;\n  code: number;\n  content?: User;\n}\n\ninterface PaginationUserContent {\n  items: User[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface User {\n  id: number;\n  subjectId: number;\n  name: string;\n  username: string;\n  roles: RoleUser[];\n}\n\nexport interface RoleUser {\n  id: number;\n  identifier: string;\n  parts: BasicPart[];\n}\n\nexport interface BasicPart {\n  id: number;\n  applicationPartName: string;\n  allowed: string[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\ninterface RolePaginationResult {\n  message: string;\n  code: number;\n  content?: RolePaginationContent;\n}\n\ninterface RolePaginationContent {\n  items: Role[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface Role {\n  id: number;\n  identifier: string;\n  parts: Part[];\n}\n\nexport interface Part {\n  id: number;\n  applicationPartName: string;\n  allowed: Option[];\n}\n\ninterface RoleResult {\n  message: string;\n  code: number;\n  content?: BasicRole[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\nexport interface Option {\n  allowed: string;\n  id: number;\n}\n","import { NodebootOauth2StarterService } from './nodeboot-oauth2-starter.service';\nimport { Component, Input, OnInit } from '@angular/core';\n@Component({\n  selector: 'lib-nodeboot-oauth2-starter',\n  templateUrl: './nodeboot-oauth2-starter.component.html',\n  styleUrls: ['./global.scss'],\n})\nexport class NodebootOauth2StarterComponent implements OnInit {\n  testTextT!: string;\n  @Input() otherText!: string;\n  constructor(private nbService: NodebootOauth2StarterService) {\n    this.testTextT = this.nbService.apiUrl;\n  }\n\n  ngOnInit(): void {}\n}\n","<div>\r\n  <p>Hola {{ testTextT }}</p>\r\n</div>\r\n<div>\r\n  <h2>{{ otherText }}</h2>\r\n</div>\r\n","import { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatTooltipModule,\r\n  ],\r\n})\r\nexport class LibraryMaterials {}\r\n","import {\n  NodebootOauth2StarterService,\n  // User,\n} from './../nodeboot-oauth2-starter.service';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport {\n  BehaviorSubject,\n  Subscription,\n  merge,\n  startWith,\n  switchMap,\n  catchError,\n  of,\n  map,\n  first,\n} from 'rxjs';\n// import { CreateUserComponent } from './create-user/create-user.component';\n// import { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\n// import { DeleteUserComponent } from './delete-user/delete-user.component';\n// import { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\n// import { UpdateUserComponent } from './update-user/update-user.component';\n\n@Component({\n  selector: 'lib-oauth-starter-users',\n  templateUrl: './oauth-starter-users.component.html',\n  styleUrls: ['./oauth-starter-users.component.scss'],\n})\nexport class OauthStarterUsersComponent {\n  // users!: User[];\n  // errorMessage!: string | undefined;\n  // displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\n\n  // resultsLength = 0;\n  // isLoadingResults = true;\n\n  // reload = new BehaviorSubject<number>(0);\n\n  // userDataSubscription!: Subscription;\n\n  // @ViewChild(MatPaginator) paginator!: MatPaginator;\n  // @ViewChild(MatSort) sort!: MatSort;\n\n  constructor() {}\n\n  // ngOnDestroy(): void {\n  //   this.userDataSubscription?.unsubscribe();\n  // }\n\n  // ngAfterViewInit(): void {\n  //   this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n  //   this.userDataSubscription = merge(\n  //     this.sort.sortChange,\n  //     this.paginator.page,\n  //     this.reload\n  //   )\n  //     .pipe(\n  //       startWith({}),\n  //       switchMap(() => {\n  //         this.errorMessage = undefined;\n  //         this.isLoadingResults = true;\n  //         return this.userService!.getUsers(\n  //           this.paginator.pageIndex,\n  //           this.sort.direction\n  //         ).pipe(\n  //           catchError((err) => {\n  //             if (err.error) {\n  //               this.errorMessage = err.error.message;\n  //             } else {\n  //               this.errorMessage = 'Unknown Error';\n  //             }\n  //             return of(null);\n  //           })\n  //         );\n  //       }),\n  //       map((data) => {\n  //         this.isLoadingResults = false;\n  //         if (data === null) {\n  //           return [];\n  //         }\n  //         this.resultsLength = data.content?.totalItems || 0;\n  //         return data.content?.items || [];\n  //       })\n  //     )\n  //     .subscribe((data) => {\n  //       this.users = data;\n  //     });\n  // }\n\n  // ngOnInit(): void {}\n\n  // openCreateUserDialog() {\n  //   const createUserDialogRef = this.dialog.open(CreateUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //   });\n  //   createUserDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openViewRolesDialog(user: User) {\n  //   this.dialog.open(ViewUserRolesComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n  // }\n\n  // openDialogDeleteUser(user: User) {\n  //   const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateRolesDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openUpdateRolesDialog(user: User) {\n  //   const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateRolesDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openUpdateUserDialog(user: User) {\n  //   const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateUserDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n}\n","<!-- <div class=\"user-container\">\n  <div class=\"users-head\">\n    <h1 class=\"user-title\">Users</h1>\n    <span class=\"separator\"></span>\n    <button (click)=\"openCreateUserDialog()\" color=\"accent\" mat-flat-button>\n      Add User\n    </button>\n  </div>\n  <div class=\"user-body\">\n    <div class=\"container-table mat-elevation-z8\">\n      <div class=\"loading-shade\" *ngIf=\"isLoadingResults\">\n        <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n      </div>\n\n      <div class=\"example-table-container\">\n        <table\n          mat-table\n          [dataSource]=\"users\"\n          class=\"user-table\"\n          matSort\n          matSortActive=\"id\"\n          matSortDisableClear\n          matSortDirection=\"asc\"\n        >\n          <ng-container matColumnDef=\"id\">\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef>Name</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef>Username</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.username }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"roles\">\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\n            <td class=\"roles-column\" mat-cell *matCellDef=\"let row\">\n              <button (click)=\"openViewRolesDialog(row)\" mat-stroked-button>\n                View Roles\n              </button>\n              <button\n                [disabled]=\"row.username === 'admin'\"\n                (click)=\"openUpdateRolesDialog(row)\"\n                mat-stroked-button\n              >\n                Update Roles\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"actions-column\" mat-cell *matCellDef=\"let row\">\n              <button\n                color=\"primary\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openUpdateUserDialog(row)\"\n              >\n                Edit User\n              </button>\n              <button\n                color=\"warn\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openDialogDeleteUser(row)\"\n              >\n                Delete User\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n        </table>\n      </div>\n\n      <mat-paginator\n        [length]=\"resultsLength\"\n        [pageSize]=\"20\"\n        aria-label=\"Select page of GitHub search results\"\n      ></mat-paginator>\n    </div>\n  </div>\n</div> -->\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { User } from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-view-user-roles',\n  templateUrl: './view-user-roles.component.html',\n  styleUrls: ['./view-user-roles.component.scss'],\n})\nexport class ViewUserRolesComponent implements OnInit {\n  userTitle: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<ViewUserRolesComponent>,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.userTitle = `${user.name} roles`;\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n  ngOnInit(): void {}\n}\n","<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { NodebootOauth2StarterComponent } from './nodeboot-oauth2-starter.component';\nimport { LibraryMaterials } from './material.module';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OauthStarterUsersComponent } from './oauth-starter-users/oauth-starter-users.component';\nimport { ViewUserRolesComponent } from './oauth-starter-users/view-user-roles/view-user-roles.component';\n\n@NgModule({\n  declarations: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    ViewUserRolesComponent,\n  ],\n  imports: [\n    LibraryMaterials,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [NodebootOauth2StarterComponent],\n})\nexport class NodebootOauth2StarterModule {}\n","/*\n * Public API Surface of nodeboot-oauth2-starter\n */\n\nexport * from './lib/nodeboot-oauth2-starter.service';\nexport * from './lib/nodeboot-oauth2-starter.component';\nexport * from './lib/nodeboot-oauth2-starter.module';\n// export * from './lib/oauth-starter-users/oauth-starter-users.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, Input, NgModule } from '@angular/core';\nimport { first } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i6 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MatDialogModule, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i3 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i2 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from '@angular/material/divider';\nimport * as i7 from '@angular/material/core';\n\nclass NodebootOauth2StarterService {\r\n    constructor(http, configuration) {\r\n        this.http = http;\r\n        this.configuration = configuration;\r\n        this.authUserApi = configuration.api + '/auth/user';\r\n        this.authRoleApi = configuration.api + '/auth/role';\r\n    }\r\n    getUsers(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authUserApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    createUser(createUserData) {\r\n        return this.http.post(this.authUserApi, createUserData).pipe(first());\r\n    }\r\n    updatePassword(userId, newPassword, oldPassword) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/password`, {\r\n            newPassword,\r\n            oldPassword,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    updateUserRoles(userId, roles) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/role`, { roles })\r\n            .pipe(first());\r\n    }\r\n    deleteUser(subjectId) {\r\n        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\r\n    }\r\n    updateUser(subjectId, updateBody) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${subjectId}`, updateBody)\r\n            .pipe(first());\r\n    }\r\n    getUserProfile() {\r\n        return this.http\r\n            .get(`${this.authUserApi}/profile/me`)\r\n            .pipe(first());\r\n    }\r\n    getRolesBasic() {\r\n        return this.http\r\n            .get(this.authRoleApi + '?basic=true')\r\n            .pipe(first());\r\n    }\r\n    createRole(identifier, allowedObject) {\r\n        return this.http\r\n            .post(this.authRoleApi, { identifier, allowedObject })\r\n            .pipe(first());\r\n    }\r\n    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {\r\n        return this.http\r\n            .put(this.authRoleApi + `/${roleId}/option`, {\r\n            newAllowedObject,\r\n            originalAllowedObject,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    deleteRole(roleId) {\r\n        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\r\n    }\r\n    getRoles(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authRoleApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    get apiUrl() {\r\n        return this.configuration.api;\r\n    }\r\n}\r\nNodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: ['configuration']\r\n                    }] }];\r\n    } });\n\nclass NodebootOauth2StarterComponent {\r\n    constructor(nbService) {\r\n        this.nbService = nbService;\r\n        this.testTextT = this.nbService.apiUrl;\r\n    }\r\n    ngOnInit() { }\r\n}\r\nNodebootOauth2StarterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, deps: [{ token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodebootOauth2StarterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NodebootOauth2StarterComponent, selector: \"lib-nodeboot-oauth2-starter\", inputs: { otherText: \"otherText\" }, ngImport: i0, template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-nodeboot-oauth2-starter', template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }]; }, propDecorators: { otherText: [{\r\n                type: Input\r\n            }] } });\n\nclass LibraryMaterials {\r\n}\r\nLibraryMaterials.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nLibraryMaterials.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, exports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\nLibraryMaterials.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, imports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [\r\n                        MatToolbarModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                        MatSidenavModule,\r\n                        MatListModule,\r\n                        MatGridListModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule,\r\n                        MatSelectModule,\r\n                        MatTableModule,\r\n                        MatSortModule,\r\n                        MatMenuModule,\r\n                        MatPaginatorModule,\r\n                        MatProgressSpinnerModule,\r\n                        MatDialogModule,\r\n                        MatListModule,\r\n                        MatExpansionModule,\r\n                        MatTooltipModule,\r\n                    ],\r\n                }]\r\n        }] });\n\n// import { CreateUserComponent } from './create-user/create-user.component';\r\n// import { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\r\n// import { DeleteUserComponent } from './delete-user/delete-user.component';\r\n// import { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\r\n// import { UpdateUserComponent } from './update-user/update-user.component';\r\nclass OauthStarterUsersComponent {\r\n    // users!: User[];\r\n    // errorMessage!: string | undefined;\r\n    // displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\r\n    // resultsLength = 0;\r\n    // isLoadingResults = true;\r\n    // reload = new BehaviorSubject<number>(0);\r\n    // userDataSubscription!: Subscription;\r\n    // @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n    // @ViewChild(MatSort) sort!: MatSort;\r\n    constructor() { }\r\n}\r\nOauthStarterUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUsersComponent, selector: \"lib-oauth-starter-users\", ngImport: i0, template: \"<!-- <div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div> -->\\n\", styles: [\"\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-users', template: \"<!-- <div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div> -->\\n\", styles: [\"\"] }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass ViewUserRolesComponent {\r\n    constructor(dialogRef, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.user = user;\r\n        this.userTitle = `${user.name} roles`;\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    ngOnInit() { }\r\n}\r\nViewUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nViewUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ViewUserRolesComponent, selector: \"lib-view-user-roles\", ngImport: i0, template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i4.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { type: i6.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i3.MatListSubheaderCssMatStyler, selector: \"[mat-subheader], [matSubheader]\" }, { type: i3.MatListIconCssMatStyler, selector: \"[mat-list-icon], [matListIcon]\" }, { type: i7.MatLine, selector: \"[mat-line], [matLine]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-view-user-roles', template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$1.MatDialogRef }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass NodebootOauth2StarterModule {\r\n}\r\nNodebootOauth2StarterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNodebootOauth2StarterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, declarations: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        ViewUserRolesComponent], imports: [LibraryMaterials,\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NodebootOauth2StarterComponent] });\r\nNodebootOauth2StarterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, imports: [[\r\n            LibraryMaterials,\r\n            HttpClientModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        ViewUserRolesComponent,\r\n                    ],\r\n                    imports: [\r\n                        LibraryMaterials,\r\n                        HttpClientModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                    ],\r\n                    exports: [NodebootOauth2StarterComponent],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of nodeboot-oauth2-starter\r\n */\r\n// export * from './lib/oauth-starter-users/oauth-starter-users.component';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NodebootOauth2StarterComponent, NodebootOauth2StarterModule, NodebootOauth2StarterService };\n//# sourceMappingURL=nodeboot-oauth2-starter.mjs.map\n","map":{"version":3,"file":"nodeboot-oauth2-starter.mjs","sources":["../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.service.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/material.module.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.module.ts","../../../projects/nodeboot-oauth2-starter/src/public-api.ts","../../../projects/nodeboot-oauth2-starter/src/nodeboot-oauth2-starter.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, first } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NodebootOauth2StarterService {\n  configuration: {\n    api: string;\n  };\n  authUserApi: string;\n  authRoleApi: string;\n  constructor(\n    private http: HttpClient,\n    @Inject('configuration')\n    configuration: {\n      api: string;\n    }\n  ) {\n    this.configuration = configuration;\n    this.authUserApi = configuration.api + '/auth/user';\n    this.authRoleApi = configuration.api + '/auth/role';\n  }\n\n  getUsers(pageIndex: number, order: string): Observable<UserPaginationResult> {\n    return this.http\n      .get<UserPaginationResult>(\n        this.authUserApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    roles: BasicRole[];\n  }) {\n    return this.http.post(this.authUserApi, createUserData).pipe(first());\n  }\n\n  updatePassword(userId: number, newPassword: string, oldPassword: string) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/password`, {\n        newPassword,\n        oldPassword,\n      })\n      .pipe(first());\n  }\n\n  updateUserRoles(userId: number, roles: BasicRole[]) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/role`, { roles })\n      .pipe(first());\n  }\n\n  deleteUser(subjectId: number) {\n    return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\n  }\n\n  updateUser(subjectId: number, updateBody: UserUpdateBody) {\n    return this.http\n      .put(`${this.authUserApi}/${subjectId}`, updateBody)\n      .pipe(first());\n  }\n\n  getUserProfile(): Observable<UserProfileResult> {\n    return this.http\n      .get<UserProfileResult>(`${this.authUserApi}/profile/me`)\n      .pipe(first());\n  }\n\n  getRolesBasic(): Observable<RoleResult> {\n    return this.http\n      .get<RoleResult>(this.authRoleApi + '?basic=true')\n      .pipe(first());\n  }\n\n  createRole(identifier: string, allowedObject: Record<string, Option[]>) {\n    return this.http\n      .post(this.authRoleApi, { identifier, allowedObject })\n      .pipe(first());\n  }\n\n  updateRoleOptions(\n    roleId: number,\n    newAllowedObject: Record<string, Option[]>,\n    originalAllowedObject: Record<string, Option[]>\n  ) {\n    return this.http\n      .put(this.authRoleApi + `/${roleId}/option`, {\n        newAllowedObject,\n        originalAllowedObject,\n      })\n      .pipe(first());\n  }\n\n  deleteRole(roleId: number) {\n    return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\n  }\n\n  getRoles(pageIndex: number, order: string): Observable<RolePaginationResult> {\n    return this.http\n      .get<RolePaginationResult>(\n        this.authRoleApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  get apiUrl() {\n    return this.configuration.api;\n  }\n}\n\nexport interface UserUpdateBody {\n  name: string;\n}\n\ninterface UserPaginationResult {\n  message: string;\n  code: number;\n  content?: PaginationUserContent;\n}\n\ninterface UserProfileResult {\n  message: string;\n  code: number;\n  content?: User;\n}\n\ninterface PaginationUserContent {\n  items: User[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface User {\n  id: number;\n  subjectId: number;\n  name: string;\n  username: string;\n  roles: RoleUser[];\n}\n\nexport interface RoleUser {\n  id: number;\n  identifier: string;\n  parts: BasicPart[];\n}\n\nexport interface BasicPart {\n  id: number;\n  applicationPartName: string;\n  allowed: string[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\ninterface RolePaginationResult {\n  message: string;\n  code: number;\n  content?: RolePaginationContent;\n}\n\ninterface RolePaginationContent {\n  items: Role[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface Role {\n  id: number;\n  identifier: string;\n  parts: Part[];\n}\n\nexport interface Part {\n  id: number;\n  applicationPartName: string;\n  allowed: Option[];\n}\n\ninterface RoleResult {\n  message: string;\n  code: number;\n  content?: BasicRole[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\nexport interface Option {\n  allowed: string;\n  id: number;\n}\n","import { NodebootOauth2StarterService } from './nodeboot-oauth2-starter.service';\nimport { Component, Input, OnInit } from '@angular/core';\n@Component({\n  selector: 'lib-nodeboot-oauth2-starter',\n  templateUrl: './nodeboot-oauth2-starter.component.html',\n  styleUrls: ['./global.scss'],\n})\nexport class NodebootOauth2StarterComponent implements OnInit {\n  testTextT!: string;\n  @Input() otherText!: string;\n  constructor(private nbService: NodebootOauth2StarterService) {\n    this.testTextT = this.nbService.apiUrl;\n  }\n\n  ngOnInit(): void {}\n}\n","<div>\r\n  <p>Hola {{ testTextT }}</p>\r\n</div>\r\n<div>\r\n  <h2>{{ otherText }}</h2>\r\n</div>\r\n","import { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatTooltipModule,\r\n  ],\r\n})\r\nexport class LibraryMaterials {}\r\n","import {\n  NodebootOauth2StarterService,\n  // User,\n} from './../nodeboot-oauth2-starter.service';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport {\n  BehaviorSubject,\n  Subscription,\n  merge,\n  startWith,\n  switchMap,\n  catchError,\n  of,\n  map,\n  first,\n} from 'rxjs';\n// import { CreateUserComponent } from './create-user/create-user.component';\n// import { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\n// import { DeleteUserComponent } from './delete-user/delete-user.component';\n// import { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\n// import { UpdateUserComponent } from './update-user/update-user.component';\n\n@Component({\n  selector: 'lib-oauth-starter-users',\n  templateUrl: './oauth-starter-users.component.html',\n  styleUrls: ['./oauth-starter-users.component.scss'],\n})\nexport class OauthStarterUsersComponent {\n  // users!: User[];\n  // errorMessage!: string | undefined;\n  // displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\n\n  // resultsLength = 0;\n  // isLoadingResults = true;\n\n  // reload = new BehaviorSubject<number>(0);\n\n  // userDataSubscription!: Subscription;\n\n  // @ViewChild(MatPaginator) paginator!: MatPaginator;\n  // @ViewChild(MatSort) sort!: MatSort;\n\n  constructor() {}\n\n  // ngOnDestroy(): void {\n  //   this.userDataSubscription?.unsubscribe();\n  // }\n\n  // ngAfterViewInit(): void {\n  //   this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n  //   this.userDataSubscription = merge(\n  //     this.sort.sortChange,\n  //     this.paginator.page,\n  //     this.reload\n  //   )\n  //     .pipe(\n  //       startWith({}),\n  //       switchMap(() => {\n  //         this.errorMessage = undefined;\n  //         this.isLoadingResults = true;\n  //         return this.userService!.getUsers(\n  //           this.paginator.pageIndex,\n  //           this.sort.direction\n  //         ).pipe(\n  //           catchError((err) => {\n  //             if (err.error) {\n  //               this.errorMessage = err.error.message;\n  //             } else {\n  //               this.errorMessage = 'Unknown Error';\n  //             }\n  //             return of(null);\n  //           })\n  //         );\n  //       }),\n  //       map((data) => {\n  //         this.isLoadingResults = false;\n  //         if (data === null) {\n  //           return [];\n  //         }\n  //         this.resultsLength = data.content?.totalItems || 0;\n  //         return data.content?.items || [];\n  //       })\n  //     )\n  //     .subscribe((data) => {\n  //       this.users = data;\n  //     });\n  // }\n\n  // ngOnInit(): void {}\n\n  // openCreateUserDialog() {\n  //   const createUserDialogRef = this.dialog.open(CreateUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //   });\n  //   createUserDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openViewRolesDialog(user: User) {\n  //   this.dialog.open(ViewUserRolesComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n  // }\n\n  // openDialogDeleteUser(user: User) {\n  //   const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateRolesDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openUpdateRolesDialog(user: User) {\n  //   const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateRolesDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n\n  // openUpdateUserDialog(user: User) {\n  //   const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\n  //     width: '600px',\n  //     maxHeight: '70vh',\n  //     data: user,\n  //   });\n\n  //   updateUserDialogRef\n  //     .afterClosed()\n  //     .pipe(first())\n  //     .subscribe({\n  //       next: (res) => {\n  //         if (res) {\n  //           this.reload.next(this.reload.value + 1);\n  //         }\n  //       },\n  //     });\n  // }\n}\n","<!-- <div class=\"user-container\">\n  <div class=\"users-head\">\n    <h1 class=\"user-title\">Users</h1>\n    <span class=\"separator\"></span>\n    <button (click)=\"openCreateUserDialog()\" color=\"accent\" mat-flat-button>\n      Add User\n    </button>\n  </div>\n  <div class=\"user-body\">\n    <div class=\"container-table mat-elevation-z8\">\n      <div class=\"loading-shade\" *ngIf=\"isLoadingResults\">\n        <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n      </div>\n\n      <div class=\"example-table-container\">\n        <table\n          mat-table\n          [dataSource]=\"users\"\n          class=\"user-table\"\n          matSort\n          matSortActive=\"id\"\n          matSortDisableClear\n          matSortDirection=\"asc\"\n        >\n          <ng-container matColumnDef=\"id\">\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef>Name</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef>Username</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.username }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"roles\">\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\n            <td class=\"roles-column\" mat-cell *matCellDef=\"let row\">\n              <button (click)=\"openViewRolesDialog(row)\" mat-stroked-button>\n                View Roles\n              </button>\n              <button\n                [disabled]=\"row.username === 'admin'\"\n                (click)=\"openUpdateRolesDialog(row)\"\n                mat-stroked-button\n              >\n                Update Roles\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"actions-column\" mat-cell *matCellDef=\"let row\">\n              <button\n                color=\"primary\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openUpdateUserDialog(row)\"\n              >\n                Edit User\n              </button>\n              <button\n                color=\"warn\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openDialogDeleteUser(row)\"\n              >\n                Delete User\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n        </table>\n      </div>\n\n      <mat-paginator\n        [length]=\"resultsLength\"\n        [pageSize]=\"20\"\n        aria-label=\"Select page of GitHub search results\"\n      ></mat-paginator>\n    </div>\n  </div>\n</div> -->\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { User } from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-view-user-roles',\n  templateUrl: './view-user-roles.component.html',\n  styleUrls: ['./view-user-roles.component.scss'],\n})\nexport class ViewUserRolesComponent implements OnInit {\n  userTitle: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<ViewUserRolesComponent>,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.userTitle = `${user.name} roles`;\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n  ngOnInit(): void {}\n}\n","<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { NodebootOauth2StarterComponent } from './nodeboot-oauth2-starter.component';\nimport { LibraryMaterials } from './material.module';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OauthStarterUsersComponent } from './oauth-starter-users/oauth-starter-users.component';\nimport { ViewUserRolesComponent } from './oauth-starter-users/view-user-roles/view-user-roles.component';\n\n@NgModule({\n  declarations: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    ViewUserRolesComponent,\n  ],\n  imports: [\n    LibraryMaterials,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [NodebootOauth2StarterComponent],\n})\nexport class NodebootOauth2StarterModule {}\n","/*\n * Public API Surface of nodeboot-oauth2-starter\n */\n\nexport * from './lib/nodeboot-oauth2-starter.service';\nexport * from './lib/nodeboot-oauth2-starter.component';\nexport * from './lib/nodeboot-oauth2-starter.module';\n// export * from './lib/oauth-starter-users/oauth-starter-users.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAOa,4BAA4B;IAMvC,YACU,IAAgB,EAExB,aAEC;QAJO,SAAI,GAAJ,IAAI,CAAY;QAMxB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,GAAG,GAAG,YAAY,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,GAAG,GAAG,YAAY,CAAC;KACrD;IAED,QAAQ,CAAC,SAAiB,EAAE,KAAa;QACvC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CACF,IAAI,CAAC,WAAW;YACd,cAAc,SAAS,4BAA4B,KAAK,EAAE,CAC7D;aACA,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,UAAU,CAAC,cAKV;QACC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACvE;IAED,cAAc,CAAC,MAAc,EAAE,WAAmB,EAAE,WAAmB;QACrE,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,MAAM,WAAW,EAAE;YAC7C,WAAW;YACX,WAAW;SACZ,CAAC;aACD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,eAAe,CAAC,MAAc,EAAE,KAAkB;QAChD,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,MAAM,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC;aACpD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAC3E;IAED,UAAU,CAAC,SAAiB,EAAE,UAA0B;QACtD,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,SAAS,EAAE,EAAE,UAAU,CAAC;aACnD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAoB,GAAG,IAAI,CAAC,WAAW,aAAa,CAAC;aACxD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,aAAa;QACX,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAa,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;aACjD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,UAAU,CAAC,UAAkB,EAAE,aAAuC;QACpE,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC;aACrD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,iBAAiB,CACf,MAAc,EACd,gBAA0C,EAC1C,qBAA+C;QAE/C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,SAAS,EAAE;YAC3C,gBAAgB;YAChB,qBAAqB;SACtB,CAAC;aACD,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,UAAU,CAAC,MAAc;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACxE;IAED,QAAQ,CAAC,SAAiB,EAAE,KAAa;QACvC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CACF,IAAI,CAAC,WAAW;YACd,cAAc,SAAS,4BAA4B,KAAK,EAAE,CAC7D;aACA,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;KAC/B;;yHA3GU,4BAA4B,4CAQ7B,eAAe;6HARd,4BAA4B,cAF3B,MAAM;2FAEP,4BAA4B;kBAHxC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;8BASI,MAAM;+BAAC,eAAe;;;;MCRd,8BAA8B;IAGzC,YAAoB,SAAuC;QAAvC,cAAS,GAAT,SAAS,CAA8B;QACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;KACxC;IAED,QAAQ,MAAW;;2HAPR,8BAA8B;+GAA9B,8BAA8B,uGCP3C,uGAMA;2FDCa,8BAA8B;kBAL1C,SAAS;+BACE,6BAA6B;gHAM9B,SAAS;sBAAjB,KAAK;;;MEgCK,gBAAgB;;6GAAhB,gBAAgB;8GAAhB,gBAAgB,YApBzB,gBAAgB;QAChB,aAAa;QACb,eAAe;QACf,gBAAgB;QAChB,aAAa;QACb,iBAAiB;QACjB,kBAAkB;QAClB,cAAc;QACd,eAAe;QACf,cAAc;QACd,aAAa;QACb,aAAa;QACb,kBAAkB;QAClB,wBAAwB;QACxB,eAAe;QACf,aAAa;QACb,kBAAkB;QAClB,gBAAgB;8GAGP,gBAAgB,YApBzB,gBAAgB;QAChB,aAAa;QACb,eAAe;QACf,gBAAgB;QAChB,aAAa;QACb,iBAAiB;QACjB,kBAAkB;QAClB,cAAc;QACd,eAAe;QACf,cAAc;QACd,aAAa;QACb,aAAa;QACb,kBAAkB;QAClB,wBAAwB;QACxB,eAAe;QACf,aAAa;QACb,kBAAkB;QAClB,gBAAgB;2FAGP,gBAAgB;kBAtB5B,QAAQ;mBAAC;oBACR,OAAO,EAAE;wBACP,gBAAgB;wBAChB,aAAa;wBACb,eAAe;wBACf,gBAAgB;wBAChB,aAAa;wBACb,iBAAiB;wBACjB,kBAAkB;wBAClB,cAAc;wBACd,eAAe;wBACf,cAAc;wBACd,aAAa;wBACb,aAAa;wBACb,kBAAkB;wBAClB,wBAAwB;wBACxB,eAAe;wBACf,aAAa;wBACb,kBAAkB;wBAClB,gBAAgB;qBACjB;iBACF;;;ACfD;AACA;AACA;AACA;AACA;MAOa,0BAA0B;;;;;;;;;;IAerC,iBAAgB;;uHAfL,0BAA0B;2GAA1B,0BAA0B,+DCpCvC,ooGA0FA;2FDtDa,0BAA0B;kBALtC,SAAS;+BACE,yBAAyB;;;MEvBxB,sBAAsB;IAGjC,YACS,SAA+C,EACtB,IAAU;QADnC,cAAS,GAAT,SAAS,CAAsC;QACtB,SAAI,GAAJ,IAAI,CAAM;QAE1C,IAAI,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC;KACvC;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACxB;IACD,QAAQ,MAAW;;mHAbR,sBAAsB,gDAKvB,eAAe;uGALd,sBAAsB,2DCTnC,ymCAiCA;2FDxBa,sBAAsB;kBALlC,SAAS;+BACE,qBAAqB;;;8BAS5B,MAAM;+BAAC,eAAe;;;;MESd,2BAA2B;;wHAA3B,2BAA2B;yHAA3B,2BAA2B,iBAZpC,8BAA8B;QAC9B,0BAA0B;QAC1B,sBAAsB,aAGtB,gBAAgB;QAChB,gBAAgB;QAChB,WAAW;QACX,mBAAmB,aAEX,8BAA8B;yHAE7B,2BAA2B,YAR7B;YACP,gBAAgB;YAChB,gBAAgB;YAChB,WAAW;YACX,mBAAmB;SACpB;2FAGU,2BAA2B;kBAdvC,QAAQ;mBAAC;oBACR,YAAY,EAAE;wBACZ,8BAA8B;wBAC9B,0BAA0B;wBAC1B,sBAAsB;qBACvB;oBACD,OAAO,EAAE;wBACP,gBAAgB;wBAChB,gBAAgB;wBAChB,WAAW;wBACX,mBAAmB;qBACpB;oBACD,OAAO,EAAE,CAAC,8BAA8B,CAAC;iBAC1C;;;ACtBD;;;AAOA;;ACPA;;;;;;"}}}