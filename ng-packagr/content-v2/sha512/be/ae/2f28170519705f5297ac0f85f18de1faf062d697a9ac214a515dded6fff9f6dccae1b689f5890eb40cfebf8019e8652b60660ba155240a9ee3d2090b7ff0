{"hash":"2ab5da120d1cc2acf50f74901f582ef3f9a14474","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, Input, NgModule, ViewChild } from '@angular/core';\nimport { first, BehaviorSubject, merge, startWith, switchMap, catchError, of, map } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i1$2 from '@angular/forms';\nimport { Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i7$2 from '@angular/material/paginator';\nimport { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i6$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport * as i7$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i5$2 from '@angular/material/table';\nimport { MatTableModule } from '@angular/material/table';\nimport * as i6$2 from '@angular/material/sort';\nimport { MatSortModule, MatSort } from '@angular/material/sort';\nimport { MatMenuModule } from '@angular/material/menu';\nimport * as i4$1 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i3 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i2 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i5$1 from '@angular/material/divider';\nimport * as i7 from '@angular/material/core';\n\nclass NodebootOauth2StarterService {\r\n    constructor(http, configuration) {\r\n        this.http = http;\r\n        this.configuration = configuration;\r\n        this.authUserApi = configuration.api + '/auth/user';\r\n        this.authRoleApi = configuration.api + '/auth/role';\r\n    }\r\n    getUsers(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authUserApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    createUser(createUserData) {\r\n        return this.http.post(this.authUserApi, createUserData).pipe(first());\r\n    }\r\n    updatePassword(userId, newPassword, oldPassword) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/password`, {\r\n            newPassword,\r\n            oldPassword,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    updateUserRoles(userId, roles) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/role`, { roles })\r\n            .pipe(first());\r\n    }\r\n    deleteUser(subjectId) {\r\n        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\r\n    }\r\n    updateUser(subjectId, updateBody) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${subjectId}`, updateBody)\r\n            .pipe(first());\r\n    }\r\n    getUserProfile() {\r\n        return this.http\r\n            .get(`${this.authUserApi}/profile/me`)\r\n            .pipe(first());\r\n    }\r\n    getRolesBasic() {\r\n        return this.http\r\n            .get(this.authRoleApi + '?basic=true')\r\n            .pipe(first());\r\n    }\r\n    createRole(identifier, allowedObject) {\r\n        return this.http\r\n            .post(this.authRoleApi, { identifier, allowedObject })\r\n            .pipe(first());\r\n    }\r\n    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {\r\n        return this.http\r\n            .put(this.authRoleApi + `/${roleId}/option`, {\r\n            newAllowedObject,\r\n            originalAllowedObject,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    deleteRole(roleId) {\r\n        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\r\n    }\r\n    getRoles(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authRoleApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    get apiUrl() {\r\n        return this.configuration.api;\r\n    }\r\n}\r\nNodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['configuration']\r\n                }] }]; } });\n\nclass NodebootOauth2StarterComponent {\r\n    constructor(nbService) {\r\n        this.nbService = nbService;\r\n        this.testTextT = this.nbService.apiUrl;\r\n    }\r\n    ngOnInit() { }\r\n}\r\nNodebootOauth2StarterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, deps: [{ token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodebootOauth2StarterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NodebootOauth2StarterComponent, selector: \"lib-nodeboot-oauth2-starter\", inputs: { otherText: \"otherText\" }, ngImport: i0, template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-nodeboot-oauth2-starter', template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }]; }, propDecorators: { otherText: [{\r\n                type: Input\r\n            }] } });\n\nclass DeleteUserComponent {\r\n    constructor(dialogRef, nbService, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n    }\r\n    ngOnInit() { }\r\n    delete() {\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService.deleteUser(this.user.subjectId).subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\nDeleteUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: DeleteUserComponent, deps: [{ token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nDeleteUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: DeleteUserComponent, selector: \"lib-delete-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n    <h5>{{ errorMessage }}</h5>\\n  </div>\\n  <p>Are you sure?</p>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"warn\\\"\\n    mat-stroked-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Cancel</button\\n  ><button\\n    (click)=\\\"delete()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-flat-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Delete\\n  </button>\\n</div>\\n\", styles: [\".error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}\\n\"], components: [{ type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: DeleteUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-delete-user', template: \"<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n    <h5>{{ errorMessage }}</h5>\\n  </div>\\n  <p>Are you sure?</p>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"warn\\\"\\n    mat-stroked-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Cancel</button\\n  ><button\\n    (click)=\\\"delete()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-flat-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Delete\\n  </button>\\n</div>\\n\", styles: [\".error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass UpdateUserComponent {\r\n    constructor(formBuilder, dialogRef, nbService, user) {\r\n        this.formBuilder = formBuilder;\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.updateUserForm = this.formBuilder.group({\r\n            name: this.formBuilder.control(user.name, Validators.compose([\r\n                Validators.required,\r\n                Validators.minLength(4),\r\n                Validators.maxLength(45),\r\n                Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\r\n            ])),\r\n        });\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    updateUser(updateUserData) {\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService.updateUser(this.user.subjectId, updateUserData).subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n}\r\nUpdateUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: UpdateUserComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nUpdateUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: UpdateUserComponent, selector: \"lib-update-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Update User {{ user.name }}</h2>\\n<form\\n  [formGroup]=\\\"updateUserForm\\\"\\n  (ngSubmit)=\\\"updateUser(updateUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!updateUserForm.valid || dialogRef.disableClose\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: UpdateUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-update-user', template: \"<h2 mat-dialog-title>Update User {{ user.name }}</h2>\\n<form\\n  [formGroup]=\\\"updateUserForm\\\"\\n  (ngSubmit)=\\\"updateUser(updateUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!updateUserForm.valid || dialogRef.disableClose\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass LibraryMaterials {\r\n}\r\nLibraryMaterials.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nLibraryMaterials.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, exports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\nLibraryMaterials.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, imports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [\r\n                        MatToolbarModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                        MatSidenavModule,\r\n                        MatListModule,\r\n                        MatGridListModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule,\r\n                        MatSelectModule,\r\n                        MatTableModule,\r\n                        MatSortModule,\r\n                        MatMenuModule,\r\n                        MatPaginatorModule,\r\n                        MatProgressSpinnerModule,\r\n                        MatDialogModule,\r\n                        MatListModule,\r\n                        MatExpansionModule,\r\n                        MatTooltipModule,\r\n                    ],\r\n                }]\r\n        }] });\n\nclass ViewUserRolesComponent {\r\n    constructor(dialogRef, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.user = user;\r\n        this.userTitle = `${user.name} roles`;\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    ngOnInit() { }\r\n}\r\nViewUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nViewUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ViewUserRolesComponent, selector: \"lib-view-user-roles\", ngImport: i0, template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5$1.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i3.MatListSubheaderCssMatStyler, selector: \"[mat-subheader], [matSubheader]\" }, { type: i3.MatListIconCssMatStyler, selector: \"[mat-list-icon], [matListIcon]\" }, { type: i7.MatLine, selector: \"[mat-line], [matLine]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-view-user-roles', template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass CreateUserComponent {\r\n    constructor(dialogRef, formBuilder, nbService) {\r\n        this.dialogRef = dialogRef;\r\n        this.formBuilder = formBuilder;\r\n        this.nbService = nbService;\r\n        this.roles = [];\r\n        this.rolesList = [];\r\n        this.hidePassword = true;\r\n        this.nbService.getRolesBasic().subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: (res) => {\r\n                this.roles = res.content || [];\r\n            },\r\n        });\r\n        this.createUserForm = this.formBuilder.group({\r\n            name: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.minLength(4),\r\n                Validators.maxLength(45),\r\n                Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\r\n            ])),\r\n            username: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9]+$/),\r\n                Validators.minLength(4),\r\n                Validators.maxLength(20),\r\n            ])),\r\n            password: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n            role: this.formBuilder.control(''),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    addRoleToList() {\r\n        const roleValue = this.createUserForm.get('role')?.value;\r\n        if (!roleValue) {\r\n            return;\r\n        }\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.roles.splice(indexOfRole, 1);\r\n        this.rolesList.push(roleValue);\r\n        this.createUserForm.get('role')?.setValue('');\r\n    }\r\n    removeRoleToList(role) {\r\n        const roleValue = role;\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.rolesList.splice(indexOfRole, 1);\r\n        this.roles.push(roleValue);\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    createUser(createUserData) {\r\n        createUserData.role = undefined;\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService\r\n            .createUser({ ...createUserData, roles: this.rolesList })\r\n            .subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nCreateUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: CreateUserComponent, deps: [{ token: i1$1.MatDialogRef }, { token: i1$2.FormBuilder }, { token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nCreateUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: CreateUserComponent, selector: \"lib-create-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Create User</h2>\\n<form\\n  [formGroup]=\\\"createUserForm\\\"\\n  (ngSubmit)=\\\"createUser(createUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Username</mat-label>\\n      <input\\n        matInput\\n        placeholder=\\\"admin01\\\"\\n        formControlName=\\\"username\\\"\\n        name=\\\"username\\\"\\n        required\\n      />\\n      <mat-hint>Your username</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Password</mat-label>\\n      <input\\n        formControlName=\\\"password\\\"\\n        name=\\\"password\\\"\\n        matInput\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hidePassword = !hidePassword\\\"\\n        [attr.aria-label]=\\\"'hidePassword password'\\\"\\n        [attr.aria-pressed]=\\\"hidePassword\\\"\\n      >\\n        <mat-icon>{{\\n          hidePassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your password</mat-hint>\\n    </mat-form-field>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!createUserForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Create\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i7$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i4.MatSuffix, selector: \"[matSuffix]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: CreateUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-create-user', template: \"<h2 mat-dialog-title>Create User</h2>\\n<form\\n  [formGroup]=\\\"createUserForm\\\"\\n  (ngSubmit)=\\\"createUser(createUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Username</mat-label>\\n      <input\\n        matInput\\n        placeholder=\\\"admin01\\\"\\n        formControlName=\\\"username\\\"\\n        name=\\\"username\\\"\\n        required\\n      />\\n      <mat-hint>Your username</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Password</mat-label>\\n      <input\\n        formControlName=\\\"password\\\"\\n        name=\\\"password\\\"\\n        matInput\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hidePassword = !hidePassword\\\"\\n        [attr.aria-label]=\\\"'hidePassword password'\\\"\\n        [attr.aria-pressed]=\\\"hidePassword\\\"\\n      >\\n        <mat-icon>{{\\n          hidePassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your password</mat-hint>\\n    </mat-form-field>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!createUserForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Create\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: i1$2.FormBuilder }, { type: NodebootOauth2StarterService }]; } });\n\nclass AddUserRolesComponent {\r\n    constructor(dialogRef, formBuilder, nbService, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.formBuilder = formBuilder;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.roles = [];\r\n        this.rolesList = [];\r\n        this.nbService.getRolesBasic().subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: (res) => {\r\n                const availableRoles = res.content?.flatMap((c) => {\r\n                    const roleExist = user.roles.findIndex((r) => c.id == r.id);\r\n                    if (roleExist === -1) {\r\n                        return c;\r\n                    }\r\n                    this.rolesList.push(c);\r\n                    return [];\r\n                });\r\n                this.roles = availableRoles || [];\r\n            },\r\n        });\r\n        this.addRolesForm = this.formBuilder.group({\r\n            role: this.formBuilder.control(''),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    addRoleToList() {\r\n        const roleValue = this.addRolesForm.get('role')?.value;\r\n        if (!roleValue) {\r\n            return;\r\n        }\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.roles.splice(indexOfRole, 1);\r\n        this.rolesList.push(roleValue);\r\n        this.addRolesForm.get('role')?.setValue('');\r\n    }\r\n    removeRoleToList(role) {\r\n        const roleValue = role;\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.rolesList.splice(indexOfRole, 1);\r\n        this.roles.push(roleValue);\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    updateRoles() {\r\n        const rolesListToSend = this.rolesList.flatMap((rl) => {\r\n            const roleExist = this.user.roles.findIndex((r) => rl.id == r.id);\r\n            if (roleExist === -1) {\r\n                return rl;\r\n            }\r\n            return [];\r\n        });\r\n        if (rolesListToSend.length === 0) {\r\n            return this.dialogRef.close(false);\r\n        }\r\n        this.nbService.updateUserRoles(this.user.id, rolesListToSend).subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nAddUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: AddUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: i1$2.FormBuilder }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nAddUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: AddUserRolesComponent, selector: \"lib-add-user-roles\", ngImport: i0, template: \"<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\\n<form [formGroup]=\\\"addRolesForm\\\" (ngSubmit)=\\\"updateRoles()\\\">\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!addRolesForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i7$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: AddUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-add-user-roles', template: \"<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\\n<form [formGroup]=\\\"addRolesForm\\\" (ngSubmit)=\\\"updateRoles()\\\">\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!addRolesForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: i1$2.FormBuilder }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass OauthStarterUsersComponent {\r\n    constructor(nbService, dialog) {\r\n        this.nbService = nbService;\r\n        this.dialog = dialog;\r\n        this.displayedColumns = ['id', 'name', 'username', 'roles', 'edit'];\r\n        this.resultsLength = 0;\r\n        this.isLoadingResults = true;\r\n        this.reload = new BehaviorSubject(0);\r\n    }\r\n    ngOnDestroy() {\r\n        this.userDataSubscription?.unsubscribe();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n        this.userDataSubscription = merge(this.sort.sortChange, this.paginator.page, this.reload)\r\n            .pipe(startWith({}), switchMap(() => {\r\n            this.errorMessage = undefined;\r\n            this.isLoadingResults = true;\r\n            return this.nbService.getUsers(this.paginator.pageIndex, this.sort.direction).pipe(catchError((err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                return of(null);\r\n            }));\r\n        }), map((data) => {\r\n            this.isLoadingResults = false;\r\n            if (data === null) {\r\n                return [];\r\n            }\r\n            this.resultsLength = data.content?.totalItems || 0;\r\n            return data.content?.items || [];\r\n        }))\r\n            .subscribe((data) => {\r\n            this.users = data;\r\n        });\r\n    }\r\n    // ngOnInit(): void {}\r\n    openCreateUserDialog() {\r\n        const createUserDialogRef = this.dialog.open(CreateUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n        });\r\n        createUserDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openViewRolesDialog(user) {\r\n        this.dialog.open(ViewUserRolesComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n    }\r\n    openDialogDeleteUser(user) {\r\n        const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateRolesDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openUpdateRolesDialog(user) {\r\n        const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateRolesDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openUpdateUserDialog(user) {\r\n        const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateUserDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\nOauthStarterUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, deps: [{ token: NodebootOauth2StarterService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUsersComponent, selector: \"lib-oauth-starter-users\", viewQueries: [{ propertyName: \"paginator\", first: true, predicate: MatPaginator, descendants: true }, { propertyName: \"sort\", first: true, predicate: MatSort, descendants: true }], ngImport: i0, template: \"<div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".user-container .users-head{display:flex;margin-bottom:2rem}.user-container .users-head .separator{flex:1 0}.user-container .users-head .user-title{margin:0;font-size:32px}.user-container table{width:100%}.user-container table th,.user-container table td{width:20%}.user-container table .roles-column button:last-child{margin-left:.5rem}.user-container table .actions-column{text-align:end}.user-container table .actions-column button:last-child{margin-left:.5rem}.user-container .container-table{position:relative}.user-container .loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}\\n\"], components: [{ type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$1.MatSpinner, selector: \"mat-spinner\", inputs: [\"color\"] }, { type: i5$2.MatTable, selector: \"mat-table, table[mat-table]\", exportAs: [\"matTable\"] }, { type: i6$2.MatSortHeader, selector: \"[mat-sort-header]\", inputs: [\"disabled\", \"mat-sort-header\", \"arrowPosition\", \"start\", \"sortActionDescription\", \"disableClear\"], exportAs: [\"matSortHeader\"] }, { type: i5$2.MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", exportAs: [\"matHeaderRow\"] }, { type: i5$2.MatRow, selector: \"mat-row, tr[mat-row]\", exportAs: [\"matRow\"] }, { type: i7$2.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }], directives: [{ type: i6$2.MatSort, selector: \"[matSort]\", inputs: [\"matSortDisabled\", \"matSortActive\", \"matSortStart\", \"matSortDirection\", \"matSortDisableClear\"], outputs: [\"matSortChange\"], exportAs: [\"matSort\"] }, { type: i5$2.MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { type: i5$2.MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { type: i5$2.MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { type: i5$2.MatCellDef, selector: \"[matCellDef]\" }, { type: i5$2.MatCell, selector: \"mat-cell, td[mat-cell]\" }, { type: i5$2.MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"] }, { type: i5$2.MatRowDef, selector: \"[matRowDef]\", inputs: [\"matRowDefColumns\", \"matRowDefWhen\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-users', template: \"<div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".user-container .users-head{display:flex;margin-bottom:2rem}.user-container .users-head .separator{flex:1 0}.user-container .users-head .user-title{margin:0;font-size:32px}.user-container table{width:100%}.user-container table th,.user-container table td{width:20%}.user-container table .roles-column button:last-child{margin-left:.5rem}.user-container table .actions-column{text-align:end}.user-container table .actions-column button:last-child{margin-left:.5rem}.user-container .container-table{position:relative}.user-container .loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }, { type: i1$1.MatDialog }]; }, propDecorators: { paginator: [{\r\n                type: ViewChild,\r\n                args: [MatPaginator]\r\n            }], sort: [{\r\n                type: ViewChild,\r\n                args: [MatSort]\r\n            }] } });\n\nclass ChangePasswordComponent {\r\n    constructor(formBuilder, dialogRef, nbService, user) {\r\n        this.formBuilder = formBuilder;\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.hideNewPassword = true;\r\n        this.hideOldPassword = true;\r\n        this.changePasswordForm = this.formBuilder.group({\r\n            oldPassword: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n            newPassword: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    changePassword(updatePasswordData) {\r\n        this.nbService\r\n            .updatePassword(this.user.id, updatePasswordData.newPassword, updatePasswordData.oldPassword)\r\n            .subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nChangePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ChangePasswordComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nChangePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ChangePasswordComponent, selector: \"lib-change-password\", ngImport: i0, template: \"<h2 mat-dialog-title>Change Password</h2>\\n<form\\n  [formGroup]=\\\"changePasswordForm\\\"\\n  (ngSubmit)=\\\"changePassword(changePasswordForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Old Password</mat-label>\\n      <input\\n        formControlName=\\\"oldPassword\\\"\\n        name=\\\"oldPassword\\\"\\n        matInput\\n        [type]=\\\"hideOldPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideOldPassword = !hideOldPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideOldPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideOldPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your current password</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>New Password</mat-label>\\n      <input\\n        formControlName=\\\"newPassword\\\"\\n        name=\\\"newPassword\\\"\\n        matInput\\n        [type]=\\\"hideNewPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideNewPassword = !hideNewPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideNewPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideNewPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your new password</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!changePasswordForm.valid\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatSuffix, selector: \"[matSuffix]\" }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ChangePasswordComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-change-password', template: \"<h2 mat-dialog-title>Change Password</h2>\\n<form\\n  [formGroup]=\\\"changePasswordForm\\\"\\n  (ngSubmit)=\\\"changePassword(changePasswordForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Old Password</mat-label>\\n      <input\\n        formControlName=\\\"oldPassword\\\"\\n        name=\\\"oldPassword\\\"\\n        matInput\\n        [type]=\\\"hideOldPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideOldPassword = !hideOldPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideOldPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideOldPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your current password</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>New Password</mat-label>\\n      <input\\n        formControlName=\\\"newPassword\\\"\\n        name=\\\"newPassword\\\"\\n        matInput\\n        [type]=\\\"hideNewPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideNewPassword = !hideNewPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideNewPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideNewPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your new password</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!changePasswordForm.valid\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }]; } });\n\nclass OauthStarterUserProfileComponent {\r\n    constructor(nbService, dialog) {\r\n        this.nbService = nbService;\r\n        this.dialog = dialog;\r\n        this.nbService.getUserProfile().subscribe({\r\n            next: (res) => {\r\n                this.user = res.content;\r\n                console.log(res);\r\n            },\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    openChangePasswordDialog() {\r\n        this.dialog.open(ChangePasswordComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: this.user,\r\n        });\r\n    }\r\n}\r\nOauthStarterUserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUserProfileComponent, deps: [{ token: NodebootOauth2StarterService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUserProfileComponent, selector: \"lib-oauth-starter-user-profile\", ngImport: i0, template: \"<div class=\\\"profile-container\\\" *ngIf=\\\"user\\\">\\n  <div class=\\\"header\\\">\\n    <h1>{{ user.name }} Profile</h1>\\n    <h4>#{{ user.id }}</h4>\\n  </div>\\n  <section>\\n    <h3>Roles</h3>\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            #{{ role.id }} | Role Name: {{ role.identifier }}\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <mat-list role=\\\"list\\\">\\n          <mat-list-item *ngFor=\\\"let part of role.parts\\\" role=\\\"listitem\\\"\\n            >{{ part.applicationPartName }} | Options:\\n            {{ part.allowed.join(\\\",\\\") }}</mat-list-item\\n          >\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n    <div class=\\\"actions\\\">\\n      <button\\n        type=\\\"button\\\"\\n        (click)=\\\"openChangePasswordDialog()\\\"\\n        mat-flat-button\\n        color=\\\"accent\\\"\\n      >\\n        Change Password\\n      </button>\\n    </div>\\n  </section>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUserProfileComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-user-profile', template: \"<div class=\\\"profile-container\\\" *ngIf=\\\"user\\\">\\n  <div class=\\\"header\\\">\\n    <h1>{{ user.name }} Profile</h1>\\n    <h4>#{{ user.id }}</h4>\\n  </div>\\n  <section>\\n    <h3>Roles</h3>\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            #{{ role.id }} | Role Name: {{ role.identifier }}\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <mat-list role=\\\"list\\\">\\n          <mat-list-item *ngFor=\\\"let part of role.parts\\\" role=\\\"listitem\\\"\\n            >{{ part.applicationPartName }} | Options:\\n            {{ part.allowed.join(\\\",\\\") }}</mat-list-item\\n          >\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n    <div class=\\\"actions\\\">\\n      <button\\n        type=\\\"button\\\"\\n        (click)=\\\"openChangePasswordDialog()\\\"\\n        mat-flat-button\\n        color=\\\"accent\\\"\\n      >\\n        Change Password\\n      </button>\\n    </div>\\n  </section>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }, { type: i1$1.MatDialog }]; } });\n\nclass NodebootOauth2StarterModule {\r\n}\r\nNodebootOauth2StarterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNodebootOauth2StarterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, declarations: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        OauthStarterUserProfileComponent,\r\n        ViewUserRolesComponent,\r\n        CreateUserComponent,\r\n        UpdateUserComponent,\r\n        DeleteUserComponent,\r\n        AddUserRolesComponent,\r\n        ChangePasswordComponent], imports: [LibraryMaterials,\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        OauthStarterUserProfileComponent] });\r\nNodebootOauth2StarterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, imports: [[\r\n            LibraryMaterials,\r\n            HttpClientModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        OauthStarterUserProfileComponent,\r\n                        ViewUserRolesComponent,\r\n                        CreateUserComponent,\r\n                        UpdateUserComponent,\r\n                        DeleteUserComponent,\r\n                        AddUserRolesComponent,\r\n                        ChangePasswordComponent,\r\n                    ],\r\n                    imports: [\r\n                        LibraryMaterials,\r\n                        HttpClientModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                    ],\r\n                    exports: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        OauthStarterUserProfileComponent,\r\n                    ],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of nodeboot-oauth2-starter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NodebootOauth2StarterComponent, NodebootOauth2StarterModule, NodebootOauth2StarterService, OauthStarterUserProfileComponent, OauthStarterUsersComponent };\n//# sourceMappingURL=nodeboot-oauth2-starter.mjs.map\n","map":{"version":3,"file":"nodeboot-oauth2-starter.mjs","sources":["../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.service.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/delete-user/delete-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/delete-user/delete-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/update-user/update-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/update-user/update-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/material.module.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/create-user/create-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/create-user/create-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/add-user-roles/add-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/add-user-roles/add-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/change-password/change-password.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/change-password/change-password.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/oauth-starter-user-profile.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/oauth-starter-user-profile.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.module.ts","../../../projects/nodeboot-oauth2-starter/src/public-api.ts","../../../projects/nodeboot-oauth2-starter/src/nodeboot-oauth2-starter.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, first } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NodebootOauth2StarterService {\n  configuration: {\n    api: string;\n  };\n  authUserApi: string;\n  authRoleApi: string;\n  constructor(\n    private http: HttpClient,\n    @Inject('configuration')\n    configuration: {\n      api: string;\n    }\n  ) {\n    this.configuration = configuration;\n    this.authUserApi = configuration.api + '/auth/user';\n    this.authRoleApi = configuration.api + '/auth/role';\n  }\n\n  getUsers(pageIndex: number, order: string): Observable<UserPaginationResult> {\n    return this.http\n      .get<UserPaginationResult>(\n        this.authUserApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    roles: BasicRole[];\n  }) {\n    return this.http.post(this.authUserApi, createUserData).pipe(first());\n  }\n\n  updatePassword(userId: number, newPassword: string, oldPassword: string) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/password`, {\n        newPassword,\n        oldPassword,\n      })\n      .pipe(first());\n  }\n\n  updateUserRoles(userId: number, roles: BasicRole[]) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/role`, { roles })\n      .pipe(first());\n  }\n\n  deleteUser(subjectId: number) {\n    return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\n  }\n\n  updateUser(subjectId: number, updateBody: UserUpdateBody) {\n    return this.http\n      .put(`${this.authUserApi}/${subjectId}`, updateBody)\n      .pipe(first());\n  }\n\n  getUserProfile(): Observable<UserProfileResult> {\n    return this.http\n      .get<UserProfileResult>(`${this.authUserApi}/profile/me`)\n      .pipe(first());\n  }\n\n  getRolesBasic(): Observable<RoleResult> {\n    return this.http\n      .get<RoleResult>(this.authRoleApi + '?basic=true')\n      .pipe(first());\n  }\n\n  createRole(identifier: string, allowedObject: Record<string, Option[]>) {\n    return this.http\n      .post(this.authRoleApi, { identifier, allowedObject })\n      .pipe(first());\n  }\n\n  updateRoleOptions(\n    roleId: number,\n    newAllowedObject: Record<string, Option[]>,\n    originalAllowedObject: Record<string, Option[]>\n  ) {\n    return this.http\n      .put(this.authRoleApi + `/${roleId}/option`, {\n        newAllowedObject,\n        originalAllowedObject,\n      })\n      .pipe(first());\n  }\n\n  deleteRole(roleId: number) {\n    return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\n  }\n\n  getRoles(pageIndex: number, order: string): Observable<RolePaginationResult> {\n    return this.http\n      .get<RolePaginationResult>(\n        this.authRoleApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  get apiUrl() {\n    return this.configuration.api;\n  }\n}\n\nexport interface UserUpdateBody {\n  name: string;\n}\n\ninterface UserPaginationResult {\n  message: string;\n  code: number;\n  content?: PaginationUserContent;\n}\n\ninterface UserProfileResult {\n  message: string;\n  code: number;\n  content?: User;\n}\n\ninterface PaginationUserContent {\n  items: User[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface User {\n  id: number;\n  subjectId: number;\n  name: string;\n  username: string;\n  roles: RoleUser[];\n}\n\nexport interface RoleUser {\n  id: number;\n  identifier: string;\n  parts: BasicPart[];\n}\n\nexport interface BasicPart {\n  id: number;\n  applicationPartName: string;\n  allowed: string[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\ninterface RolePaginationResult {\n  message: string;\n  code: number;\n  content?: RolePaginationContent;\n}\n\ninterface RolePaginationContent {\n  items: Role[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface Role {\n  id: number;\n  identifier: string;\n  parts: Part[];\n}\n\nexport interface Part {\n  id: number;\n  applicationPartName: string;\n  allowed: Option[];\n}\n\ninterface RoleResult {\n  message: string;\n  code: number;\n  content?: BasicRole[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\nexport interface Option {\n  allowed: string;\n  id: number;\n}\n","import { NodebootOauth2StarterService } from './nodeboot-oauth2-starter.service';\nimport { Component, Input, OnInit } from '@angular/core';\n@Component({\n  selector: 'lib-nodeboot-oauth2-starter',\n  templateUrl: './nodeboot-oauth2-starter.component.html',\n  styleUrls: ['./global.scss'],\n})\nexport class NodebootOauth2StarterComponent implements OnInit {\n  testTextT!: string;\n  @Input() otherText!: string;\n  constructor(private nbService: NodebootOauth2StarterService) {\n    this.testTextT = this.nbService.apiUrl;\n  }\n\n  ngOnInit(): void {}\n}\n","<div>\r\n  <p>Hola {{ testTextT }}</p>\r\n</div>\r\n<div>\r\n  <h2>{{ otherText }}</h2>\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-delete-user',\n  templateUrl: './delete-user.component.html',\n  styleUrls: ['./delete-user.component.scss'],\n})\nexport class DeleteUserComponent implements OnInit {\n  errorMessage!: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<DeleteUserComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {}\n\n  ngOnInit(): void {}\n\n  delete() {\n    this.dialogRef.disableClose = true;\n    this.nbService.deleteUser(this.user.subjectId).subscribe({\n      error: (err) => {\n        this.dialogRef.disableClose = false;\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n}\n","<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\n<div mat-dialog-content>\n  <div class=\"error-display\" *ngIf=\"errorMessage\">\n    <h5>{{ errorMessage }}</h5>\n  </div>\n  <p>Are you sure?</p>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"warn\"\n    mat-stroked-button\n    [disabled]=\"dialogRef.disableClose\"\n  >\n    Cancel</button\n  ><button\n    (click)=\"delete()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-flat-button\n    [disabled]=\"dialogRef.disableClose\"\n  >\n    Delete\n  </button>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n  UserUpdateBody,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-update-user',\n  templateUrl: './update-user.component.html',\n  styleUrls: ['./update-user.component.scss'],\n})\nexport class UpdateUserComponent implements OnInit {\n  errorMessage!: string;\n  updateUserForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public dialogRef: MatDialogRef<UpdateUserComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.updateUserForm = this.formBuilder.group({\n      name: this.formBuilder.control(\n        user.name,\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(45),\n          Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\n        ])\n      ),\n    });\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  updateUser(updateUserData: UserUpdateBody) {\n    this.dialogRef.disableClose = true;\n    this.nbService.updateUser(this.user.subjectId, updateUserData).subscribe({\n      error: (err) => {\n        this.dialogRef.disableClose = false;\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n\n  ngOnInit(): void {}\n}\n","<h2 mat-dialog-title>Update User {{ user.name }}</h2>\n<form\n  [formGroup]=\"updateUserForm\"\n  (ngSubmit)=\"updateUser(updateUserForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" name=\"name\" required />\n      <mat-hint>Put your name</mat-hint>\n    </mat-form-field>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!updateUserForm.valid || dialogRef.disableClose\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatTooltipModule,\r\n  ],\r\n})\r\nexport class LibraryMaterials {}\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { User } from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-view-user-roles',\n  templateUrl: './view-user-roles.component.html',\n  styleUrls: ['./view-user-roles.component.scss'],\n})\nexport class ViewUserRolesComponent implements OnInit {\n  userTitle: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<ViewUserRolesComponent>,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.userTitle = `${user.name} roles`;\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n  ngOnInit(): void {}\n}\n","<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {\n  BasicRole,\n  NodebootOauth2StarterService,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.scss'],\n})\nexport class CreateUserComponent implements OnInit {\n  createUserForm: FormGroup;\n  errorMessage!: string;\n  errorMessageRoles!: string;\n  roles: BasicRole[] = [];\n  rolesList: BasicRole[] = [];\n  hidePassword = true;\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateUserComponent>,\n    private formBuilder: FormBuilder,\n    private nbService: NodebootOauth2StarterService\n  ) {\n    this.nbService.getRolesBasic().subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: (res) => {\n        this.roles = res.content || [];\n      },\n    });\n    this.createUserForm = this.formBuilder.group({\n      name: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(45),\n          Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\n        ])\n      ),\n      username: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(/^[a-zA-Z0-9]+$/),\n          Validators.minLength(4),\n          Validators.maxLength(20),\n        ])\n      ),\n      password: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n      role: this.formBuilder.control(''),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  addRoleToList() {\n    const roleValue = this.createUserForm.get('role')?.value;\n    if (!roleValue) {\n      return;\n    }\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.roles.splice(indexOfRole, 1);\n    this.rolesList.push(roleValue);\n    this.createUserForm.get('role')?.setValue('');\n  }\n\n  removeRoleToList(role: BasicRole) {\n    const roleValue = role;\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.rolesList.splice(indexOfRole, 1);\n    this.roles.push(roleValue);\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    role: string | undefined;\n  }) {\n    createUserData.role = undefined;\n    this.dialogRef.disableClose = true;\n    this.nbService\n      .createUser({ ...createUserData, roles: this.rolesList })\n      .subscribe({\n        error: (err) => {\n          this.dialogRef.disableClose = false;\n          if (err.error) {\n            this.errorMessage = err.error.message;\n          } else {\n            this.errorMessage = 'Unknown Error';\n          }\n        },\n        next: () => {\n          this.dialogRef.close(true);\n        },\n      });\n  }\n}\n","<h2 mat-dialog-title>Create User</h2>\n<form\n  [formGroup]=\"createUserForm\"\n  (ngSubmit)=\"createUser(createUserForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" name=\"name\" required />\n      <mat-hint>Put your name</mat-hint>\n    </mat-form-field>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Username</mat-label>\n      <input\n        matInput\n        placeholder=\"admin01\"\n        formControlName=\"username\"\n        name=\"username\"\n        required\n      />\n      <mat-hint>Your username</mat-hint>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>Password</mat-label>\n      <input\n        formControlName=\"password\"\n        name=\"password\"\n        matInput\n        [type]=\"hidePassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hidePassword = !hidePassword\"\n        [attr.aria-label]=\"'hidePassword password'\"\n        [attr.aria-pressed]=\"hidePassword\"\n      >\n        <mat-icon>{{\n          hidePassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your password</mat-hint>\n    </mat-form-field>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>Select A Role</mat-label>\n        <mat-select name=\"role\" formControlName=\"role\">\n          <mat-option [value]=\"role\" *ngFor=\"let role of roles\">{{\n            role.identifier\n          }}</mat-option>\n        </mat-select>\n        <mat-hint>Select a role and add it</mat-hint>\n      </mat-form-field>\n      <button type=\"button\" (click)=\"addRoleToList()\" mat-stroked-button>\n        +\n      </button>\n    </div>\n    <div *ngFor=\"let role of rolesList\" class=\"roles-list\">\n      <div class=\"role-title\">\n        <h3>{{ role.identifier }}</h3>\n      </div>\n      <button\n        (click)=\"removeRoleToList(role)\"\n        color=\"warn\"\n        type=\"button\"\n        mat-stroked-button\n      >\n        -\n      </button>\n    </div>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!createUserForm.valid || rolesList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Create\n    </button>\n  </div>\n</form>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  BasicRole,\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-add-user-roles',\n  templateUrl: './add-user-roles.component.html',\n  styleUrls: ['./add-user-roles.component.scss'],\n})\nexport class AddUserRolesComponent implements OnInit {\n  addRolesForm: FormGroup;\n  errorMessage!: string;\n  errorMessageRoles!: string;\n  roles: BasicRole[] = [];\n  rolesList: BasicRole[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<AddUserRolesComponent>,\n    private formBuilder: FormBuilder,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.nbService.getRolesBasic().subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: (res) => {\n        const availableRoles = res.content?.flatMap((c) => {\n          const roleExist = user.roles.findIndex((r) => c.id == r.id) as number;\n          if (roleExist === -1) {\n            return c;\n          }\n          this.rolesList.push(c);\n          return [];\n        });\n        this.roles = availableRoles || [];\n      },\n    });\n    this.addRolesForm = this.formBuilder.group({\n      role: this.formBuilder.control(''),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  addRoleToList() {\n    const roleValue = this.addRolesForm.get('role')?.value;\n    if (!roleValue) {\n      return;\n    }\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.roles.splice(indexOfRole, 1);\n    this.rolesList.push(roleValue);\n    this.addRolesForm.get('role')?.setValue('');\n  }\n\n  removeRoleToList(role: BasicRole) {\n    const roleValue = role;\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.rolesList.splice(indexOfRole, 1);\n    this.roles.push(roleValue);\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  updateRoles() {\n    const rolesListToSend = this.rolesList.flatMap((rl) => {\n      const roleExist = this.user.roles.findIndex(\n        (r) => rl.id == r.id\n      ) as number;\n      if (roleExist === -1) {\n        return rl;\n      }\n      return [];\n    });\n    if (rolesListToSend.length === 0) {\n      return this.dialogRef.close(false);\n    }\n    this.nbService.updateUserRoles(this.user.id, rolesListToSend).subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n}\n","<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\n<form [formGroup]=\"addRolesForm\" (ngSubmit)=\"updateRoles()\">\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>Select A Role</mat-label>\n        <mat-select name=\"role\" formControlName=\"role\">\n          <mat-option [value]=\"role\" *ngFor=\"let role of roles\">{{\n            role.identifier\n          }}</mat-option>\n        </mat-select>\n        <mat-hint>Select a role and add it</mat-hint>\n      </mat-form-field>\n      <button type=\"button\" (click)=\"addRoleToList()\" mat-stroked-button>\n        +\n      </button>\n    </div>\n    <div *ngFor=\"let role of rolesList\" class=\"roles-list\">\n      <div class=\"role-title\">\n        <h3>{{ role.identifier }}</h3>\n      </div>\n      <button\n        (click)=\"removeRoleToList(role)\"\n        color=\"warn\"\n        type=\"button\"\n        mat-stroked-button\n      >\n        -\n      </button>\n    </div>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!addRolesForm.valid || rolesList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import {\n  NodebootOauth2StarterService,\n  User,\n  // User,\n} from './../nodeboot-oauth2-starter.service';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport {\n  BehaviorSubject,\n  Subscription,\n  merge,\n  startWith,\n  switchMap,\n  catchError,\n  of,\n  map,\n  first,\n} from 'rxjs';\nimport { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\nimport { CreateUserComponent } from './create-user/create-user.component';\nimport { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\nimport { DeleteUserComponent } from './delete-user/delete-user.component';\nimport { UpdateUserComponent } from './update-user/update-user.component';\n\n@Component({\n  selector: 'lib-oauth-starter-users',\n  templateUrl: './oauth-starter-users.component.html',\n  styleUrls: ['./oauth-starter-users.component.scss'],\n})\nexport class OauthStarterUsersComponent implements OnDestroy, AfterViewInit {\n  users!: User[];\n  errorMessage!: string | undefined;\n  displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n\n  reload = new BehaviorSubject<number>(0);\n\n  userDataSubscription!: Subscription;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(\n    private nbService: NodebootOauth2StarterService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userDataSubscription?.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n    this.userDataSubscription = merge(\n      this.sort.sortChange,\n      this.paginator.page,\n      this.reload\n    )\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.errorMessage = undefined;\n          this.isLoadingResults = true;\n          return this.nbService!.getUsers(\n            this.paginator.pageIndex,\n            this.sort.direction\n          ).pipe(\n            catchError((err) => {\n              if (err.error) {\n                this.errorMessage = err.error.message;\n              } else {\n                this.errorMessage = 'Unknown Error';\n              }\n              return of(null);\n            })\n          );\n        }),\n        map((data) => {\n          this.isLoadingResults = false;\n          if (data === null) {\n            return [];\n          }\n          this.resultsLength = data.content?.totalItems || 0;\n          return data.content?.items || [];\n        })\n      )\n      .subscribe((data) => {\n        this.users = data;\n      });\n  }\n\n  // ngOnInit(): void {}\n\n  openCreateUserDialog() {\n    const createUserDialogRef = this.dialog.open(CreateUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n    });\n    createUserDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openViewRolesDialog(user: User) {\n    this.dialog.open(ViewUserRolesComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n  }\n\n  openDialogDeleteUser(user: User) {\n    const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateRolesDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openUpdateRolesDialog(user: User) {\n    const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateRolesDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openUpdateUserDialog(user: User) {\n    const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateUserDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n}\n","<div class=\"user-container\">\n  <div class=\"users-head\">\n    <h1 class=\"user-title\">Users</h1>\n    <span class=\"separator\"></span>\n    <button (click)=\"openCreateUserDialog()\" color=\"accent\" mat-flat-button>\n      Add User\n    </button>\n  </div>\n  <div class=\"user-body\">\n    <div class=\"container-table mat-elevation-z8\">\n      <div class=\"loading-shade\" *ngIf=\"isLoadingResults\">\n        <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n      </div>\n\n      <div class=\"example-table-container\">\n        <table\n          mat-table\n          [dataSource]=\"users\"\n          class=\"user-table\"\n          matSort\n          matSortActive=\"id\"\n          matSortDisableClear\n          matSortDirection=\"asc\"\n        >\n          <ng-container matColumnDef=\"id\">\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef>Name</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef>Username</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.username }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"roles\">\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\n            <td class=\"roles-column\" mat-cell *matCellDef=\"let row\">\n              <button (click)=\"openViewRolesDialog(row)\" mat-stroked-button>\n                View Roles\n              </button>\n              <button\n                [disabled]=\"row.username === 'admin'\"\n                (click)=\"openUpdateRolesDialog(row)\"\n                mat-stroked-button\n              >\n                Update Roles\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"actions-column\" mat-cell *matCellDef=\"let row\">\n              <button\n                color=\"primary\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openUpdateUserDialog(row)\"\n              >\n                Edit User\n              </button>\n              <button\n                color=\"warn\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openDialogDeleteUser(row)\"\n              >\n                Delete User\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n        </table>\n      </div>\n\n      <mat-paginator\n        [length]=\"resultsLength\"\n        [pageSize]=\"20\"\n        aria-label=\"Select page of GitHub search results\"\n      ></mat-paginator>\n    </div>\n  </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n})\nexport class ChangePasswordComponent implements OnInit {\n  changePasswordForm: FormGroup;\n  errorMessage!: string;\n\n  hideNewPassword = true;\n  hideOldPassword = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public dialogRef: MatDialogRef<ChangePasswordComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.changePasswordForm = this.formBuilder.group({\n      oldPassword: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n      newPassword: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  changePassword(updatePasswordData: {\n    oldPassword: string;\n    newPassword: string;\n  }) {\n    this.nbService\n      .updatePassword(\n        this.user.id,\n        updatePasswordData.newPassword,\n        updatePasswordData.oldPassword\n      )\n      .subscribe({\n        error: (err) => {\n          this.dialogRef.disableClose = false;\n          if (err.error) {\n            this.errorMessage = err.error.message;\n          } else {\n            this.errorMessage = 'Unknown Error';\n          }\n        },\n        next: () => {\n          this.dialogRef.close(true);\n        },\n      });\n  }\n}\n","<h2 mat-dialog-title>Change Password</h2>\n<form\n  [formGroup]=\"changePasswordForm\"\n  (ngSubmit)=\"changePassword(changePasswordForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>Old Password</mat-label>\n      <input\n        formControlName=\"oldPassword\"\n        name=\"oldPassword\"\n        matInput\n        [type]=\"hideOldPassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hideOldPassword = !hideOldPassword\"\n        [attr.aria-label]=\"'hideOldPassword password'\"\n        [attr.aria-pressed]=\"hideOldPassword\"\n      >\n        <mat-icon>{{\n          hideOldPassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your current password</mat-hint>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>New Password</mat-label>\n      <input\n        formControlName=\"newPassword\"\n        name=\"newPassword\"\n        matInput\n        [type]=\"hideNewPassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hideNewPassword = !hideNewPassword\"\n        [attr.aria-label]=\"'hideOldPassword password'\"\n        [attr.aria-pressed]=\"hideNewPassword\"\n      >\n        <mat-icon>{{\n          hideNewPassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your new password</mat-hint>\n    </mat-form-field>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!changePasswordForm.valid\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../nodeboot-oauth2-starter.service';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\n\n@Component({\n  selector: 'lib-oauth-starter-user-profile',\n  templateUrl: './oauth-starter-user-profile.component.html',\n  styleUrls: ['./oauth-starter-user-profile.component.scss'],\n})\nexport class OauthStarterUserProfileComponent implements OnInit {\n  user!: User;\n\n  constructor(\n    private nbService: NodebootOauth2StarterService,\n    public dialog: MatDialog\n  ) {\n    this.nbService.getUserProfile().subscribe({\n      next: (res) => {\n        this.user = res.content as User;\n        console.log(res);\n      },\n    });\n  }\n\n  ngOnInit(): void {}\n\n  openChangePasswordDialog() {\n    this.dialog.open(ChangePasswordComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: this.user,\n    });\n  }\n}\n","<div class=\"profile-container\" *ngIf=\"user\">\n  <div class=\"header\">\n    <h1>{{ user.name }} Profile</h1>\n    <h4>#{{ user.id }}</h4>\n  </div>\n  <section>\n    <h3>Roles</h3>\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            #{{ role.id }} | Role Name: {{ role.identifier }}\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-list role=\"list\">\n          <mat-list-item *ngFor=\"let part of role.parts\" role=\"listitem\"\n            >{{ part.applicationPartName }} | Options:\n            {{ part.allowed.join(\",\") }}</mat-list-item\n          >\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n    <div class=\"actions\">\n      <button\n        type=\"button\"\n        (click)=\"openChangePasswordDialog()\"\n        mat-flat-button\n        color=\"accent\"\n      >\n        Change Password\n      </button>\n    </div>\n  </section>\n</div>\n","import { DeleteUserComponent } from './oauth-starter-users/delete-user/delete-user.component';\nimport { UpdateUserComponent } from './oauth-starter-users/update-user/update-user.component';\nimport { NgModule } from '@angular/core';\nimport { NodebootOauth2StarterComponent } from './nodeboot-oauth2-starter.component';\nimport { LibraryMaterials } from './material.module';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OauthStarterUsersComponent } from './oauth-starter-users/oauth-starter-users.component';\nimport { ViewUserRolesComponent } from './oauth-starter-users/view-user-roles/view-user-roles.component';\nimport { CreateUserComponent } from './oauth-starter-users/create-user/create-user.component';\nimport { AddUserRolesComponent } from './oauth-starter-users/add-user-roles/add-user-roles.component';\nimport { OauthStarterUserProfileComponent } from './oauth-starter-user-profile/oauth-starter-user-profile.component';\nimport { ChangePasswordComponent } from './oauth-starter-user-profile/change-password/change-password.component';\n\n@NgModule({\n  declarations: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    OauthStarterUserProfileComponent,\n    ViewUserRolesComponent,\n    CreateUserComponent,\n    UpdateUserComponent,\n    DeleteUserComponent,\n    AddUserRolesComponent,\n    ChangePasswordComponent,\n  ],\n  imports: [\n    LibraryMaterials,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    OauthStarterUserProfileComponent,\n  ],\n})\nexport class NodebootOauth2StarterModule {}\n","/*\n * Public API Surface of nodeboot-oauth2-starter\n */\n\nexport * from './lib/nodeboot-oauth2-starter.service';\nexport * from './lib/nodeboot-oauth2-starter.component';\nexport * from './lib/nodeboot-oauth2-starter.module';\nexport * from './lib/oauth-starter-users/oauth-starter-users.component';\nexport * from './lib/oauth-starter-user-profile/oauth-starter-user-profile.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, Input, NgModule, ViewChild } from '@angular/core';\nimport { first, BehaviorSubject, merge, startWith, switchMap, catchError, of, map } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i1$2 from '@angular/forms';\nimport { Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i7$2 from '@angular/material/paginator';\nimport { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i6$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport * as i7$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i5$2 from '@angular/material/table';\nimport { MatTableModule } from '@angular/material/table';\nimport * as i6$2 from '@angular/material/sort';\nimport { MatSortModule, MatSort } from '@angular/material/sort';\nimport { MatMenuModule } from '@angular/material/menu';\nimport * as i4$1 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i3 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i2 from '@angular/material/expansion';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i5$1 from '@angular/material/divider';\nimport * as i7 from '@angular/material/core';\n\nclass NodebootOauth2StarterService {\r\n    constructor(http, configuration) {\r\n        this.http = http;\r\n        this.configuration = configuration;\r\n        this.authUserApi = configuration.api + '/auth/user';\r\n        this.authRoleApi = configuration.api + '/auth/role';\r\n    }\r\n    getUsers(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authUserApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    createUser(createUserData) {\r\n        return this.http.post(this.authUserApi, createUserData).pipe(first());\r\n    }\r\n    updatePassword(userId, newPassword, oldPassword) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/password`, {\r\n            newPassword,\r\n            oldPassword,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    updateUserRoles(userId, roles) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${userId}/role`, { roles })\r\n            .pipe(first());\r\n    }\r\n    deleteUser(subjectId) {\r\n        return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\r\n    }\r\n    updateUser(subjectId, updateBody) {\r\n        return this.http\r\n            .put(`${this.authUserApi}/${subjectId}`, updateBody)\r\n            .pipe(first());\r\n    }\r\n    getUserProfile() {\r\n        return this.http\r\n            .get(`${this.authUserApi}/profile/me`)\r\n            .pipe(first());\r\n    }\r\n    getRolesBasic() {\r\n        return this.http\r\n            .get(this.authRoleApi + '?basic=true')\r\n            .pipe(first());\r\n    }\r\n    createRole(identifier, allowedObject) {\r\n        return this.http\r\n            .post(this.authRoleApi, { identifier, allowedObject })\r\n            .pipe(first());\r\n    }\r\n    updateRoleOptions(roleId, newAllowedObject, originalAllowedObject) {\r\n        return this.http\r\n            .put(this.authRoleApi + `/${roleId}/option`, {\r\n            newAllowedObject,\r\n            originalAllowedObject,\r\n        })\r\n            .pipe(first());\r\n    }\r\n    deleteRole(roleId) {\r\n        return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\r\n    }\r\n    getRoles(pageIndex, order) {\r\n        return this.http\r\n            .get(this.authRoleApi +\r\n            `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`)\r\n            .pipe(first());\r\n    }\r\n    get apiUrl() {\r\n        return this.configuration.api;\r\n    }\r\n}\r\nNodebootOauth2StarterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, deps: [{ token: i1.HttpClient }, { token: 'configuration' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNodebootOauth2StarterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: ['configuration']\r\n                    }] }];\r\n    } });\n\nclass NodebootOauth2StarterComponent {\r\n    constructor(nbService) {\r\n        this.nbService = nbService;\r\n        this.testTextT = this.nbService.apiUrl;\r\n    }\r\n    ngOnInit() { }\r\n}\r\nNodebootOauth2StarterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, deps: [{ token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodebootOauth2StarterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NodebootOauth2StarterComponent, selector: \"lib-nodeboot-oauth2-starter\", inputs: { otherText: \"otherText\" }, ngImport: i0, template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-nodeboot-oauth2-starter', template: \"<div>\\r\\n  <p>Hola {{ testTextT }}</p>\\r\\n</div>\\r\\n<div>\\r\\n  <h2>{{ otherText }}</h2>\\r\\n</div>\\r\\n\", styles: [\"p{color:#0ff}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }]; }, propDecorators: { otherText: [{\r\n                type: Input\r\n            }] } });\n\nclass DeleteUserComponent {\r\n    constructor(dialogRef, nbService, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n    }\r\n    ngOnInit() { }\r\n    delete() {\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService.deleteUser(this.user.subjectId).subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\nDeleteUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: DeleteUserComponent, deps: [{ token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nDeleteUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: DeleteUserComponent, selector: \"lib-delete-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n    <h5>{{ errorMessage }}</h5>\\n  </div>\\n  <p>Are you sure?</p>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"warn\\\"\\n    mat-stroked-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Cancel</button\\n  ><button\\n    (click)=\\\"delete()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-flat-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Delete\\n  </button>\\n</div>\\n\", styles: [\".error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}\\n\"], components: [{ type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: DeleteUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-delete-user', template: \"<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n    <h5>{{ errorMessage }}</h5>\\n  </div>\\n  <p>Are you sure?</p>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"warn\\\"\\n    mat-stroked-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Cancel</button\\n  ><button\\n    (click)=\\\"delete()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-flat-button\\n    [disabled]=\\\"dialogRef.disableClose\\\"\\n  >\\n    Delete\\n  </button>\\n</div>\\n\", styles: [\".error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass UpdateUserComponent {\r\n    constructor(formBuilder, dialogRef, nbService, user) {\r\n        this.formBuilder = formBuilder;\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.updateUserForm = this.formBuilder.group({\r\n            name: this.formBuilder.control(user.name, Validators.compose([\r\n                Validators.required,\r\n                Validators.minLength(4),\r\n                Validators.maxLength(45),\r\n                Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\r\n            ])),\r\n        });\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    updateUser(updateUserData) {\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService.updateUser(this.user.subjectId, updateUserData).subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n}\r\nUpdateUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: UpdateUserComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nUpdateUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: UpdateUserComponent, selector: \"lib-update-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Update User {{ user.name }}</h2>\\n<form\\n  [formGroup]=\\\"updateUserForm\\\"\\n  (ngSubmit)=\\\"updateUser(updateUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!updateUserForm.valid || dialogRef.disableClose\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: UpdateUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-update-user', template: \"<h2 mat-dialog-title>Update User {{ user.name }}</h2>\\n<form\\n  [formGroup]=\\\"updateUserForm\\\"\\n  (ngSubmit)=\\\"updateUser(updateUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!updateUserForm.valid || dialogRef.disableClose\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$2.FormBuilder }, { type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass LibraryMaterials {\r\n}\r\nLibraryMaterials.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nLibraryMaterials.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, exports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\nLibraryMaterials.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, imports: [MatToolbarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressSpinnerModule,\r\n        MatDialogModule,\r\n        MatListModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LibraryMaterials, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [\r\n                        MatToolbarModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                        MatSidenavModule,\r\n                        MatListModule,\r\n                        MatGridListModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule,\r\n                        MatSelectModule,\r\n                        MatTableModule,\r\n                        MatSortModule,\r\n                        MatMenuModule,\r\n                        MatPaginatorModule,\r\n                        MatProgressSpinnerModule,\r\n                        MatDialogModule,\r\n                        MatListModule,\r\n                        MatExpansionModule,\r\n                        MatTooltipModule,\r\n                    ],\r\n                }]\r\n        }] });\n\nclass ViewUserRolesComponent {\r\n    constructor(dialogRef, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.user = user;\r\n        this.userTitle = `${user.name} roles`;\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    ngOnInit() { }\r\n}\r\nViewUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nViewUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ViewUserRolesComponent, selector: \"lib-view-user-roles\", ngImport: i0, template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i5$1.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }, { type: i3.MatListSubheaderCssMatStyler, selector: \"[mat-subheader], [matSubheader]\" }, { type: i3.MatListIconCssMatStyler, selector: \"[mat-list-icon], [matListIcon]\" }, { type: i7.MatLine, selector: \"[mat-line], [matLine]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ViewUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-view-user-roles', template: \"<h2 class=\\\"primary-color\\\" mat-dialog-title>{{ userTitle }}</h2>\\n<div mat-dialog-content>\\n  <div class=\\\"accordion-container\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <h4>Grouped by application part</h4>\\n        <mat-list>\\n          <div *ngFor=\\\"let option of role.parts\\\">\\n            <div mat-subheader>{{ option.applicationPartName }}</div>\\n            <mat-list-item *ngFor=\\\"let allowed of option.allowed\\\">\\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\\n            </mat-list-item>\\n            <mat-divider></mat-divider>\\n          </div>\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n  </div>\\n</div>\\n<div align=\\\"end\\\" mat-dialog-actions>\\n  <button\\n    (click)=\\\"closeDialog()\\\"\\n    type=\\\"button\\\"\\n    color=\\\"primary\\\"\\n    mat-stroked-button\\n  >\\n    Ok\\n  </button>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$1.MatDialogRef }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass CreateUserComponent {\r\n    constructor(dialogRef, formBuilder, nbService) {\r\n        this.dialogRef = dialogRef;\r\n        this.formBuilder = formBuilder;\r\n        this.nbService = nbService;\r\n        this.roles = [];\r\n        this.rolesList = [];\r\n        this.hidePassword = true;\r\n        this.nbService.getRolesBasic().subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: (res) => {\r\n                this.roles = res.content || [];\r\n            },\r\n        });\r\n        this.createUserForm = this.formBuilder.group({\r\n            name: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.minLength(4),\r\n                Validators.maxLength(45),\r\n                Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\r\n            ])),\r\n            username: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9]+$/),\r\n                Validators.minLength(4),\r\n                Validators.maxLength(20),\r\n            ])),\r\n            password: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n            role: this.formBuilder.control(''),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    addRoleToList() {\r\n        var _a, _b;\r\n        const roleValue = (_a = this.createUserForm.get('role')) === null || _a === void 0 ? void 0 : _a.value;\r\n        if (!roleValue) {\r\n            return;\r\n        }\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.roles.splice(indexOfRole, 1);\r\n        this.rolesList.push(roleValue);\r\n        (_b = this.createUserForm.get('role')) === null || _b === void 0 ? void 0 : _b.setValue('');\r\n    }\r\n    removeRoleToList(role) {\r\n        const roleValue = role;\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.rolesList.splice(indexOfRole, 1);\r\n        this.roles.push(roleValue);\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    createUser(createUserData) {\r\n        createUserData.role = undefined;\r\n        this.dialogRef.disableClose = true;\r\n        this.nbService\r\n            .createUser(Object.assign(Object.assign({}, createUserData), { roles: this.rolesList }))\r\n            .subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nCreateUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: CreateUserComponent, deps: [{ token: i1$1.MatDialogRef }, { token: i1$2.FormBuilder }, { token: NodebootOauth2StarterService }], target: i0.ɵɵFactoryTarget.Component });\r\nCreateUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: CreateUserComponent, selector: \"lib-create-user\", ngImport: i0, template: \"<h2 mat-dialog-title>Create User</h2>\\n<form\\n  [formGroup]=\\\"createUserForm\\\"\\n  (ngSubmit)=\\\"createUser(createUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Username</mat-label>\\n      <input\\n        matInput\\n        placeholder=\\\"admin01\\\"\\n        formControlName=\\\"username\\\"\\n        name=\\\"username\\\"\\n        required\\n      />\\n      <mat-hint>Your username</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Password</mat-label>\\n      <input\\n        formControlName=\\\"password\\\"\\n        name=\\\"password\\\"\\n        matInput\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hidePassword = !hidePassword\\\"\\n        [attr.aria-label]=\\\"'hidePassword password'\\\"\\n        [attr.aria-pressed]=\\\"hidePassword\\\"\\n      >\\n        <mat-icon>{{\\n          hidePassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your password</mat-hint>\\n    </mat-form-field>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!createUserForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Create\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i7$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i4.MatSuffix, selector: \"[matSuffix]\" }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: CreateUserComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-create-user', template: \"<h2 mat-dialog-title>Create User</h2>\\n<form\\n  [formGroup]=\\\"createUserForm\\\"\\n  (ngSubmit)=\\\"createUser(createUserForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput formControlName=\\\"name\\\" name=\\\"name\\\" required />\\n      <mat-hint>Put your name</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n      <mat-label>Username</mat-label>\\n      <input\\n        matInput\\n        placeholder=\\\"admin01\\\"\\n        formControlName=\\\"username\\\"\\n        name=\\\"username\\\"\\n        required\\n      />\\n      <mat-hint>Your username</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Password</mat-label>\\n      <input\\n        formControlName=\\\"password\\\"\\n        name=\\\"password\\\"\\n        matInput\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hidePassword = !hidePassword\\\"\\n        [attr.aria-label]=\\\"'hidePassword password'\\\"\\n        [attr.aria-pressed]=\\\"hidePassword\\\"\\n      >\\n        <mat-icon>{{\\n          hidePassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your password</mat-hint>\\n    </mat-form-field>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!createUserForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Create\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDialogRef }, { type: i1$2.FormBuilder }, { type: NodebootOauth2StarterService }]; } });\n\nclass AddUserRolesComponent {\r\n    constructor(dialogRef, formBuilder, nbService, user) {\r\n        this.dialogRef = dialogRef;\r\n        this.formBuilder = formBuilder;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.roles = [];\r\n        this.rolesList = [];\r\n        this.nbService.getRolesBasic().subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: (res) => {\r\n                var _a;\r\n                const availableRoles = (_a = res.content) === null || _a === void 0 ? void 0 : _a.flatMap((c) => {\r\n                    const roleExist = user.roles.findIndex((r) => c.id == r.id);\r\n                    if (roleExist === -1) {\r\n                        return c;\r\n                    }\r\n                    this.rolesList.push(c);\r\n                    return [];\r\n                });\r\n                this.roles = availableRoles || [];\r\n            },\r\n        });\r\n        this.addRolesForm = this.formBuilder.group({\r\n            role: this.formBuilder.control(''),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    addRoleToList() {\r\n        var _a, _b;\r\n        const roleValue = (_a = this.addRolesForm.get('role')) === null || _a === void 0 ? void 0 : _a.value;\r\n        if (!roleValue) {\r\n            return;\r\n        }\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.roles.splice(indexOfRole, 1);\r\n        this.rolesList.push(roleValue);\r\n        (_b = this.addRolesForm.get('role')) === null || _b === void 0 ? void 0 : _b.setValue('');\r\n    }\r\n    removeRoleToList(role) {\r\n        const roleValue = role;\r\n        const indexOfRole = this.roles.indexOf(roleValue);\r\n        this.rolesList.splice(indexOfRole, 1);\r\n        this.roles.push(roleValue);\r\n    }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    updateRoles() {\r\n        const rolesListToSend = this.rolesList.flatMap((rl) => {\r\n            const roleExist = this.user.roles.findIndex((r) => rl.id == r.id);\r\n            if (roleExist === -1) {\r\n                return rl;\r\n            }\r\n            return [];\r\n        });\r\n        if (rolesListToSend.length === 0) {\r\n            return this.dialogRef.close(false);\r\n        }\r\n        this.nbService.updateUserRoles(this.user.id, rolesListToSend).subscribe({\r\n            error: (err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                this.roles = [];\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nAddUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: AddUserRolesComponent, deps: [{ token: i1$1.MatDialogRef }, { token: i1$2.FormBuilder }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nAddUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: AddUserRolesComponent, selector: \"lib-add-user-roles\", ngImport: i0, template: \"<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\\n<form [formGroup]=\\\"addRolesForm\\\" (ngSubmit)=\\\"updateRoles()\\\">\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!addRolesForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i7$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: AddUserRolesComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-add-user-roles', template: \"<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\\n<form [formGroup]=\\\"addRolesForm\\\" (ngSubmit)=\\\"updateRoles()\\\">\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <div class=\\\"select-role\\\">\\n      <mat-form-field class=\\\"forms-field\\\" appearance=\\\"fill\\\">\\n        <mat-label>Select A Role</mat-label>\\n        <mat-select name=\\\"role\\\" formControlName=\\\"role\\\">\\n          <mat-option [value]=\\\"role\\\" *ngFor=\\\"let role of roles\\\">{{\\n            role.identifier\\n          }}</mat-option>\\n        </mat-select>\\n        <mat-hint>Select a role and add it</mat-hint>\\n      </mat-form-field>\\n      <button type=\\\"button\\\" (click)=\\\"addRoleToList()\\\" mat-stroked-button>\\n        +\\n      </button>\\n    </div>\\n    <div *ngFor=\\\"let role of rolesList\\\" class=\\\"roles-list\\\">\\n      <div class=\\\"role-title\\\">\\n        <h3>{{ role.identifier }}</h3>\\n      </div>\\n      <button\\n        (click)=\\\"removeRoleToList(role)\\\"\\n        color=\\\"warn\\\"\\n        type=\\\"button\\\"\\n        mat-stroked-button\\n      >\\n        -\\n      </button>\\n    </div>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!addRolesForm.valid || rolesList.length === 0\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}.error-display{margin:1rem 0;background-color:#ffab1098;padding:.5rem;border-radius:.25rem}.error-display h5{margin:0;font-size:16px}.select-role{display:grid;grid-template-columns:auto .15fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.select-role button{height:59.5px}.roles-list{display:grid;grid-template-columns:auto .1fr;grid-gap:.5rem;gap:.5rem;margin-bottom:1rem}.roles-list .role-title{border-radius:.25rem;background-color:#82c7ff44;padding:1rem}.roles-list .role-title h3{margin:0}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$1.MatDialogRef }, { type: i1$2.FormBuilder }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass OauthStarterUsersComponent {\r\n    constructor(nbService, dialog) {\r\n        this.nbService = nbService;\r\n        this.dialog = dialog;\r\n        this.displayedColumns = ['id', 'name', 'username', 'roles', 'edit'];\r\n        this.resultsLength = 0;\r\n        this.isLoadingResults = true;\r\n        this.reload = new BehaviorSubject(0);\r\n    }\r\n    ngOnDestroy() {\r\n        var _a;\r\n        (_a = this.userDataSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n        this.userDataSubscription = merge(this.sort.sortChange, this.paginator.page, this.reload)\r\n            .pipe(startWith({}), switchMap(() => {\r\n            this.errorMessage = undefined;\r\n            this.isLoadingResults = true;\r\n            return this.nbService.getUsers(this.paginator.pageIndex, this.sort.direction).pipe(catchError((err) => {\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n                return of(null);\r\n            }));\r\n        }), map((data) => {\r\n            var _a, _b;\r\n            this.isLoadingResults = false;\r\n            if (data === null) {\r\n                return [];\r\n            }\r\n            this.resultsLength = ((_a = data.content) === null || _a === void 0 ? void 0 : _a.totalItems) || 0;\r\n            return ((_b = data.content) === null || _b === void 0 ? void 0 : _b.items) || [];\r\n        }))\r\n            .subscribe((data) => {\r\n            this.users = data;\r\n        });\r\n    }\r\n    // ngOnInit(): void {}\r\n    openCreateUserDialog() {\r\n        const createUserDialogRef = this.dialog.open(CreateUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n        });\r\n        createUserDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openViewRolesDialog(user) {\r\n        this.dialog.open(ViewUserRolesComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n    }\r\n    openDialogDeleteUser(user) {\r\n        const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateRolesDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openUpdateRolesDialog(user) {\r\n        const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateRolesDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    openUpdateUserDialog(user) {\r\n        const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: user,\r\n        });\r\n        updateUserDialogRef\r\n            .afterClosed()\r\n            .pipe(first())\r\n            .subscribe({\r\n            next: (res) => {\r\n                if (res) {\r\n                    this.reload.next(this.reload.value + 1);\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\nOauthStarterUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, deps: [{ token: NodebootOauth2StarterService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUsersComponent, selector: \"lib-oauth-starter-users\", viewQueries: [{ propertyName: \"paginator\", first: true, predicate: MatPaginator, descendants: true }, { propertyName: \"sort\", first: true, predicate: MatSort, descendants: true }], ngImport: i0, template: \"<div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".user-container .users-head{display:flex;margin-bottom:2rem}.user-container .users-head .separator{flex:1 0}.user-container .users-head .user-title{margin:0;font-size:32px}.user-container table{width:100%}.user-container table th,.user-container table td{width:20%}.user-container table .roles-column button:last-child{margin-left:.5rem}.user-container table .actions-column{text-align:end}.user-container table .actions-column button:last-child{margin-left:.5rem}.user-container .container-table{position:relative}.user-container .loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}\\n\"], components: [{ type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i4$1.MatSpinner, selector: \"mat-spinner\", inputs: [\"color\"] }, { type: i5$2.MatTable, selector: \"mat-table, table[mat-table]\", exportAs: [\"matTable\"] }, { type: i6$2.MatSortHeader, selector: \"[mat-sort-header]\", inputs: [\"disabled\", \"mat-sort-header\", \"arrowPosition\", \"start\", \"sortActionDescription\", \"disableClear\"], exportAs: [\"matSortHeader\"] }, { type: i5$2.MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", exportAs: [\"matHeaderRow\"] }, { type: i5$2.MatRow, selector: \"mat-row, tr[mat-row]\", exportAs: [\"matRow\"] }, { type: i7$2.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }], directives: [{ type: i6$2.MatSort, selector: \"[matSort]\", inputs: [\"matSortDisabled\", \"matSortActive\", \"matSortStart\", \"matSortDirection\", \"matSortDisableClear\"], outputs: [\"matSortChange\"], exportAs: [\"matSort\"] }, { type: i5$2.MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { type: i5$2.MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { type: i5$2.MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { type: i5$2.MatCellDef, selector: \"[matCellDef]\" }, { type: i5$2.MatCell, selector: \"mat-cell, td[mat-cell]\" }, { type: i5$2.MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"] }, { type: i5$2.MatRowDef, selector: \"[matRowDef]\", inputs: [\"matRowDefColumns\", \"matRowDefWhen\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUsersComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-users', template: \"<div class=\\\"user-container\\\">\\n  <div class=\\\"users-head\\\">\\n    <h1 class=\\\"user-title\\\">Users</h1>\\n    <span class=\\\"separator\\\"></span>\\n    <button (click)=\\\"openCreateUserDialog()\\\" color=\\\"accent\\\" mat-flat-button>\\n      Add User\\n    </button>\\n  </div>\\n  <div class=\\\"user-body\\\">\\n    <div class=\\\"container-table mat-elevation-z8\\\">\\n      <div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n        <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n      </div>\\n\\n      <div class=\\\"example-table-container\\\">\\n        <table\\n          mat-table\\n          [dataSource]=\\\"users\\\"\\n          class=\\\"user-table\\\"\\n          matSort\\n          matSortActive=\\\"id\\\"\\n          matSortDisableClear\\n          matSortDirection=\\\"asc\\\"\\n        >\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.id }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef>Name</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.name }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"username\\\">\\n            <th mat-header-cell *matHeaderCellDef>Username</th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">{{ row.username }}</td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"roles\\\">\\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\\n            <td class=\\\"roles-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button (click)=\\\"openViewRolesDialog(row)\\\" mat-stroked-button>\\n                View Roles\\n              </button>\\n              <button\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                (click)=\\\"openUpdateRolesDialog(row)\\\"\\n                mat-stroked-button\\n              >\\n                Update Roles\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td class=\\\"actions-column\\\" mat-cell *matCellDef=\\\"let row\\\">\\n              <button\\n                color=\\\"primary\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openUpdateUserDialog(row)\\\"\\n              >\\n                Edit User\\n              </button>\\n              <button\\n                color=\\\"warn\\\"\\n                [disabled]=\\\"row.username === 'admin'\\\"\\n                mat-stroked-button\\n                (click)=\\\"openDialogDeleteUser(row)\\\"\\n              >\\n                Delete User\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        </table>\\n      </div>\\n\\n      <mat-paginator\\n        [length]=\\\"resultsLength\\\"\\n        [pageSize]=\\\"20\\\"\\n        aria-label=\\\"Select page of GitHub search results\\\"\\n      ></mat-paginator>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".user-container .users-head{display:flex;margin-bottom:2rem}.user-container .users-head .separator{flex:1 0}.user-container .users-head .user-title{margin:0;font-size:32px}.user-container table{width:100%}.user-container table th,.user-container table td{width:20%}.user-container table .roles-column button:last-child{margin-left:.5rem}.user-container table .actions-column{text-align:end}.user-container table .actions-column button:last-child{margin-left:.5rem}.user-container .container-table{position:relative}.user-container .loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }, { type: i1$1.MatDialog }]; }, propDecorators: { paginator: [{\r\n                type: ViewChild,\r\n                args: [MatPaginator]\r\n            }], sort: [{\r\n                type: ViewChild,\r\n                args: [MatSort]\r\n            }] } });\n\nclass ChangePasswordComponent {\r\n    constructor(formBuilder, dialogRef, nbService, user) {\r\n        this.formBuilder = formBuilder;\r\n        this.dialogRef = dialogRef;\r\n        this.nbService = nbService;\r\n        this.user = user;\r\n        this.hideNewPassword = true;\r\n        this.hideOldPassword = true;\r\n        this.changePasswordForm = this.formBuilder.group({\r\n            oldPassword: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n            newPassword: this.formBuilder.control('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.pattern(/^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/),\r\n                Validators.minLength(6),\r\n            ])),\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n    changePassword(updatePasswordData) {\r\n        this.nbService\r\n            .updatePassword(this.user.id, updatePasswordData.newPassword, updatePasswordData.oldPassword)\r\n            .subscribe({\r\n            error: (err) => {\r\n                this.dialogRef.disableClose = false;\r\n                if (err.error) {\r\n                    this.errorMessage = err.error.message;\r\n                }\r\n                else {\r\n                    this.errorMessage = 'Unknown Error';\r\n                }\r\n            },\r\n            next: () => {\r\n                this.dialogRef.close(true);\r\n            },\r\n        });\r\n    }\r\n}\r\nChangePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ChangePasswordComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$1.MatDialogRef }, { token: NodebootOauth2StarterService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\r\nChangePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ChangePasswordComponent, selector: \"lib-change-password\", ngImport: i0, template: \"<h2 mat-dialog-title>Change Password</h2>\\n<form\\n  [formGroup]=\\\"changePasswordForm\\\"\\n  (ngSubmit)=\\\"changePassword(changePasswordForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Old Password</mat-label>\\n      <input\\n        formControlName=\\\"oldPassword\\\"\\n        name=\\\"oldPassword\\\"\\n        matInput\\n        [type]=\\\"hideOldPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideOldPassword = !hideOldPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideOldPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideOldPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your current password</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>New Password</mat-label>\\n      <input\\n        formControlName=\\\"newPassword\\\"\\n        name=\\\"newPassword\\\"\\n        matInput\\n        [type]=\\\"hideNewPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideNewPassword = !hideNewPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideNewPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideNewPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your new password</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!changePasswordForm.valid\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}\\n\"], components: [{ type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i1$1.MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: [\"id\"], exportAs: [\"matDialogTitle\"] }, { type: i1$2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i1$2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i1$2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { type: i4.MatLabel, selector: \"mat-label\" }, { type: i1$2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i6.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { type: i1$2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1$2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i1$2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MatSuffix, selector: \"[matSuffix]\" }, { type: i4.MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }, { type: i1$1.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ChangePasswordComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-change-password', template: \"<h2 mat-dialog-title>Change Password</h2>\\n<form\\n  [formGroup]=\\\"changePasswordForm\\\"\\n  (ngSubmit)=\\\"changePassword(changePasswordForm.value)\\\"\\n>\\n  <div mat-dialog-content>\\n    <div class=\\\"error-display\\\" *ngIf=\\\"errorMessage\\\">\\n      <h5>{{ errorMessage }}</h5>\\n    </div>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>Old Password</mat-label>\\n      <input\\n        formControlName=\\\"oldPassword\\\"\\n        name=\\\"oldPassword\\\"\\n        matInput\\n        [type]=\\\"hideOldPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideOldPassword = !hideOldPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideOldPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideOldPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your current password</mat-hint>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"forms-field\\\">\\n      <mat-label>New Password</mat-label>\\n      <input\\n        formControlName=\\\"newPassword\\\"\\n        name=\\\"newPassword\\\"\\n        matInput\\n        [type]=\\\"hideNewPassword ? 'password' : 'text'\\\"\\n        required\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        mat-icon-button\\n        matSuffix\\n        (click)=\\\"hideNewPassword = !hideNewPassword\\\"\\n        [attr.aria-label]=\\\"'hideOldPassword password'\\\"\\n        [attr.aria-pressed]=\\\"hideNewPassword\\\"\\n      >\\n        <mat-icon>{{\\n          hideNewPassword ? \\\"visibility_off\\\" : \\\"visibility\\\"\\n        }}</mat-icon>\\n      </button>\\n      <mat-hint>Put your new password</mat-hint>\\n    </mat-form-field>\\n  </div>\\n  <div align=\\\"end\\\" mat-dialog-actions>\\n    <button\\n      (click)=\\\"closeDialog()\\\"\\n      type=\\\"button\\\"\\n      color=\\\"warn\\\"\\n      mat-stroked-button\\n      [disabled]=\\\"dialogRef.disableClose\\\"\\n    >\\n      Cancel</button\\n    ><button\\n      [disabled]=\\\"!changePasswordForm.valid\\\"\\n      color=\\\"primary\\\"\\n      mat-flat-button\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\", styles: [\".forms-field{width:100%;margin-bottom:1rem}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1$2.FormBuilder }, { type: i1$1.MatDialogRef }, { type: NodebootOauth2StarterService }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MAT_DIALOG_DATA]\r\n                    }] }];\r\n    } });\n\nclass OauthStarterUserProfileComponent {\r\n    constructor(nbService, dialog) {\r\n        this.nbService = nbService;\r\n        this.dialog = dialog;\r\n        this.nbService.getUserProfile().subscribe({\r\n            next: (res) => {\r\n                this.user = res.content;\r\n                console.log(res);\r\n            },\r\n        });\r\n    }\r\n    ngOnInit() { }\r\n    openChangePasswordDialog() {\r\n        this.dialog.open(ChangePasswordComponent, {\r\n            width: '600px',\r\n            maxHeight: '70vh',\r\n            data: this.user,\r\n        });\r\n    }\r\n}\r\nOauthStarterUserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUserProfileComponent, deps: [{ token: NodebootOauth2StarterService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\r\nOauthStarterUserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: OauthStarterUserProfileComponent, selector: \"lib-oauth-starter-user-profile\", ngImport: i0, template: \"<div class=\\\"profile-container\\\" *ngIf=\\\"user\\\">\\n  <div class=\\\"header\\\">\\n    <h1>{{ user.name }} Profile</h1>\\n    <h4>#{{ user.id }}</h4>\\n  </div>\\n  <section>\\n    <h3>Roles</h3>\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            #{{ role.id }} | Role Name: {{ role.identifier }}\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <mat-list role=\\\"list\\\">\\n          <mat-list-item *ngFor=\\\"let part of role.parts\\\" role=\\\"listitem\\\"\\n            >{{ part.applicationPartName }} | Options:\\n            {{ part.allowed.join(\\\",\\\") }}</mat-list-item\\n          >\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n    <div class=\\\"actions\\\">\\n      <button\\n        type=\\\"button\\\"\\n        (click)=\\\"openChangePasswordDialog()\\\"\\n        mat-flat-button\\n        color=\\\"accent\\\"\\n      >\\n        Change Password\\n      </button>\\n    </div>\\n  </section>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"], components: [{ type: i2.MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: [\"disabled\", \"expanded\", \"hideToggle\", \"togglePosition\"], outputs: [\"opened\", \"closed\", \"expandedChange\", \"afterExpand\", \"afterCollapse\"], exportAs: [\"matExpansionPanel\"] }, { type: i2.MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: [\"tabIndex\", \"expandedHeight\", \"collapsedHeight\"] }, { type: i3.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i3.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i2.MatAccordion, selector: \"mat-accordion\", inputs: [\"multi\", \"hideToggle\", \"displayMode\", \"togglePosition\"], exportAs: [\"matAccordion\"] }, { type: i2.MatExpansionPanelTitle, selector: \"mat-panel-title\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: OauthStarterUserProfileComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-oauth-starter-user-profile', template: \"<div class=\\\"profile-container\\\" *ngIf=\\\"user\\\">\\n  <div class=\\\"header\\\">\\n    <h1>{{ user.name }} Profile</h1>\\n    <h4>#{{ user.id }}</h4>\\n  </div>\\n  <section>\\n    <h3>Roles</h3>\\n    <mat-accordion>\\n      <mat-expansion-panel *ngFor=\\\"let role of user.roles\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            #{{ role.id }} | Role Name: {{ role.identifier }}\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <mat-list role=\\\"list\\\">\\n          <mat-list-item *ngFor=\\\"let part of role.parts\\\" role=\\\"listitem\\\"\\n            >{{ part.applicationPartName }} | Options:\\n            {{ part.allowed.join(\\\",\\\") }}</mat-list-item\\n          >\\n        </mat-list>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n    <div class=\\\"actions\\\">\\n      <button\\n        type=\\\"button\\\"\\n        (click)=\\\"openChangePasswordDialog()\\\"\\n        mat-flat-button\\n        color=\\\"accent\\\"\\n      >\\n        Change Password\\n      </button>\\n    </div>\\n  </section>\\n</div>\\n\", styles: [\".header{display:flex;align-items:baseline;gap:.5rem;flex-wrap:wrap}.header h1{margin:0;font-size:32px}.header h4{margin:0;color:gray}section{display:grid}section .roles-list{color:#000}section .actions{margin-top:2rem}.profile-container ::ng-deep .mat-list-base .mat-list-item .mat-list-item-content{color:#000}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NodebootOauth2StarterService }, { type: i1$1.MatDialog }]; } });\n\nclass NodebootOauth2StarterModule {\r\n}\r\nNodebootOauth2StarterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNodebootOauth2StarterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, declarations: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        OauthStarterUserProfileComponent,\r\n        ViewUserRolesComponent,\r\n        CreateUserComponent,\r\n        UpdateUserComponent,\r\n        DeleteUserComponent,\r\n        AddUserRolesComponent,\r\n        ChangePasswordComponent], imports: [LibraryMaterials,\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NodebootOauth2StarterComponent,\r\n        OauthStarterUsersComponent,\r\n        OauthStarterUserProfileComponent] });\r\nNodebootOauth2StarterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, imports: [[\r\n            LibraryMaterials,\r\n            HttpClientModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NodebootOauth2StarterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        OauthStarterUserProfileComponent,\r\n                        ViewUserRolesComponent,\r\n                        CreateUserComponent,\r\n                        UpdateUserComponent,\r\n                        DeleteUserComponent,\r\n                        AddUserRolesComponent,\r\n                        ChangePasswordComponent,\r\n                    ],\r\n                    imports: [\r\n                        LibraryMaterials,\r\n                        HttpClientModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                    ],\r\n                    exports: [\r\n                        NodebootOauth2StarterComponent,\r\n                        OauthStarterUsersComponent,\r\n                        OauthStarterUserProfileComponent,\r\n                    ],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of nodeboot-oauth2-starter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NodebootOauth2StarterComponent, NodebootOauth2StarterModule, NodebootOauth2StarterService, OauthStarterUserProfileComponent, OauthStarterUsersComponent };\n//# sourceMappingURL=nodeboot-oauth2-starter.mjs.map\n","map":{"version":3,"file":"nodeboot-oauth2-starter.mjs","sources":["../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.service.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/delete-user/delete-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/delete-user/delete-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/update-user/update-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/update-user/update-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/material.module.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/view-user-roles/view-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/create-user/create-user.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/create-user/create-user.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/add-user-roles/add-user-roles.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/add-user-roles/add-user-roles.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-users/oauth-starter-users.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/change-password/change-password.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/change-password/change-password.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/oauth-starter-user-profile.component.ts","../../../projects/nodeboot-oauth2-starter/src/lib/oauth-starter-user-profile/oauth-starter-user-profile.component.html","../../../projects/nodeboot-oauth2-starter/src/lib/nodeboot-oauth2-starter.module.ts","../../../projects/nodeboot-oauth2-starter/src/public-api.ts","../../../projects/nodeboot-oauth2-starter/src/nodeboot-oauth2-starter.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, first } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NodebootOauth2StarterService {\n  configuration: {\n    api: string;\n  };\n  authUserApi: string;\n  authRoleApi: string;\n  constructor(\n    private http: HttpClient,\n    @Inject('configuration')\n    configuration: {\n      api: string;\n    }\n  ) {\n    this.configuration = configuration;\n    this.authUserApi = configuration.api + '/auth/user';\n    this.authRoleApi = configuration.api + '/auth/role';\n  }\n\n  getUsers(pageIndex: number, order: string): Observable<UserPaginationResult> {\n    return this.http\n      .get<UserPaginationResult>(\n        this.authUserApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    roles: BasicRole[];\n  }) {\n    return this.http.post(this.authUserApi, createUserData).pipe(first());\n  }\n\n  updatePassword(userId: number, newPassword: string, oldPassword: string) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/password`, {\n        newPassword,\n        oldPassword,\n      })\n      .pipe(first());\n  }\n\n  updateUserRoles(userId: number, roles: BasicRole[]) {\n    return this.http\n      .put(`${this.authUserApi}/${userId}/role`, { roles })\n      .pipe(first());\n  }\n\n  deleteUser(subjectId: number) {\n    return this.http.delete(`${this.authUserApi}/${subjectId}`).pipe(first());\n  }\n\n  updateUser(subjectId: number, updateBody: UserUpdateBody) {\n    return this.http\n      .put(`${this.authUserApi}/${subjectId}`, updateBody)\n      .pipe(first());\n  }\n\n  getUserProfile(): Observable<UserProfileResult> {\n    return this.http\n      .get<UserProfileResult>(`${this.authUserApi}/profile/me`)\n      .pipe(first());\n  }\n\n  getRolesBasic(): Observable<RoleResult> {\n    return this.http\n      .get<RoleResult>(this.authRoleApi + '?basic=true')\n      .pipe(first());\n  }\n\n  createRole(identifier: string, allowedObject: Record<string, Option[]>) {\n    return this.http\n      .post(this.authRoleApi, { identifier, allowedObject })\n      .pipe(first());\n  }\n\n  updateRoleOptions(\n    roleId: number,\n    newAllowedObject: Record<string, Option[]>,\n    originalAllowedObject: Record<string, Option[]>\n  ) {\n    return this.http\n      .put(this.authRoleApi + `/${roleId}/option`, {\n        newAllowedObject,\n        originalAllowedObject,\n      })\n      .pipe(first());\n  }\n\n  deleteRole(roleId: number) {\n    return this.http.delete(this.authRoleApi + `/${roleId}`).pipe(first());\n  }\n\n  getRoles(pageIndex: number, order: string): Observable<RolePaginationResult> {\n    return this.http\n      .get<RolePaginationResult>(\n        this.authRoleApi +\n          `?pageIndex=${pageIndex}&&itemsPerPage=20&&order=${order}`\n      )\n      .pipe(first());\n  }\n\n  get apiUrl() {\n    return this.configuration.api;\n  }\n}\n\nexport interface UserUpdateBody {\n  name: string;\n}\n\ninterface UserPaginationResult {\n  message: string;\n  code: number;\n  content?: PaginationUserContent;\n}\n\ninterface UserProfileResult {\n  message: string;\n  code: number;\n  content?: User;\n}\n\ninterface PaginationUserContent {\n  items: User[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface User {\n  id: number;\n  subjectId: number;\n  name: string;\n  username: string;\n  roles: RoleUser[];\n}\n\nexport interface RoleUser {\n  id: number;\n  identifier: string;\n  parts: BasicPart[];\n}\n\nexport interface BasicPart {\n  id: number;\n  applicationPartName: string;\n  allowed: string[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\ninterface RolePaginationResult {\n  message: string;\n  code: number;\n  content?: RolePaginationContent;\n}\n\ninterface RolePaginationContent {\n  items: Role[];\n  pageIndex: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport interface Role {\n  id: number;\n  identifier: string;\n  parts: Part[];\n}\n\nexport interface Part {\n  id: number;\n  applicationPartName: string;\n  allowed: Option[];\n}\n\ninterface RoleResult {\n  message: string;\n  code: number;\n  content?: BasicRole[];\n}\n\nexport interface BasicRole {\n  id: number;\n  identifier: string;\n}\n\nexport interface Option {\n  allowed: string;\n  id: number;\n}\n","import { NodebootOauth2StarterService } from './nodeboot-oauth2-starter.service';\nimport { Component, Input, OnInit } from '@angular/core';\n@Component({\n  selector: 'lib-nodeboot-oauth2-starter',\n  templateUrl: './nodeboot-oauth2-starter.component.html',\n  styleUrls: ['./global.scss'],\n})\nexport class NodebootOauth2StarterComponent implements OnInit {\n  testTextT!: string;\n  @Input() otherText!: string;\n  constructor(private nbService: NodebootOauth2StarterService) {\n    this.testTextT = this.nbService.apiUrl;\n  }\n\n  ngOnInit(): void {}\n}\n","<div>\r\n  <p>Hola {{ testTextT }}</p>\r\n</div>\r\n<div>\r\n  <h2>{{ otherText }}</h2>\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-delete-user',\n  templateUrl: './delete-user.component.html',\n  styleUrls: ['./delete-user.component.scss'],\n})\nexport class DeleteUserComponent implements OnInit {\n  errorMessage!: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<DeleteUserComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {}\n\n  ngOnInit(): void {}\n\n  delete() {\n    this.dialogRef.disableClose = true;\n    this.nbService.deleteUser(this.user.subjectId).subscribe({\n      error: (err) => {\n        this.dialogRef.disableClose = false;\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n}\n","<h2 mat-dialog-title>Delete User {{ user.name }}</h2>\n<div mat-dialog-content>\n  <div class=\"error-display\" *ngIf=\"errorMessage\">\n    <h5>{{ errorMessage }}</h5>\n  </div>\n  <p>Are you sure?</p>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"warn\"\n    mat-stroked-button\n    [disabled]=\"dialogRef.disableClose\"\n  >\n    Cancel</button\n  ><button\n    (click)=\"delete()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-flat-button\n    [disabled]=\"dialogRef.disableClose\"\n  >\n    Delete\n  </button>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n  UserUpdateBody,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-update-user',\n  templateUrl: './update-user.component.html',\n  styleUrls: ['./update-user.component.scss'],\n})\nexport class UpdateUserComponent implements OnInit {\n  errorMessage!: string;\n  updateUserForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public dialogRef: MatDialogRef<UpdateUserComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.updateUserForm = this.formBuilder.group({\n      name: this.formBuilder.control(\n        user.name,\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(45),\n          Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\n        ])\n      ),\n    });\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  updateUser(updateUserData: UserUpdateBody) {\n    this.dialogRef.disableClose = true;\n    this.nbService.updateUser(this.user.subjectId, updateUserData).subscribe({\n      error: (err) => {\n        this.dialogRef.disableClose = false;\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n\n  ngOnInit(): void {}\n}\n","<h2 mat-dialog-title>Update User {{ user.name }}</h2>\n<form\n  [formGroup]=\"updateUserForm\"\n  (ngSubmit)=\"updateUser(updateUserForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" name=\"name\" required />\n      <mat-hint>Put your name</mat-hint>\n    </mat-form-field>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!updateUserForm.valid || dialogRef.disableClose\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatTooltipModule,\r\n  ],\r\n})\r\nexport class LibraryMaterials {}\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { User } from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-view-user-roles',\n  templateUrl: './view-user-roles.component.html',\n  styleUrls: ['./view-user-roles.component.scss'],\n})\nexport class ViewUserRolesComponent implements OnInit {\n  userTitle: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<ViewUserRolesComponent>,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.userTitle = `${user.name} roles`;\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n  ngOnInit(): void {}\n}\n","<h2 class=\"primary-color\" mat-dialog-title>{{ userTitle }}</h2>\n<div mat-dialog-content>\n  <div class=\"accordion-container\">\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> {{ role.identifier }} </mat-panel-title>\n        </mat-expansion-panel-header>\n        <h4>Grouped by application part</h4>\n        <mat-list>\n          <div *ngFor=\"let option of role.parts\">\n            <div mat-subheader>{{ option.applicationPartName }}</div>\n            <mat-list-item *ngFor=\"let allowed of option.allowed\">\n              <mat-icon mat-list-icon>vpn_key</mat-icon>\n              <div mat-line>{{ option.applicationPartName }}:{{ allowed }}</div>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          </div>\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n<div align=\"end\" mat-dialog-actions>\n  <button\n    (click)=\"closeDialog()\"\n    type=\"button\"\n    color=\"primary\"\n    mat-stroked-button\n  >\n    Ok\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {\n  BasicRole,\n  NodebootOauth2StarterService,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.scss'],\n})\nexport class CreateUserComponent implements OnInit {\n  createUserForm: FormGroup;\n  errorMessage!: string;\n  errorMessageRoles!: string;\n  roles: BasicRole[] = [];\n  rolesList: BasicRole[] = [];\n  hidePassword = true;\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateUserComponent>,\n    private formBuilder: FormBuilder,\n    private nbService: NodebootOauth2StarterService\n  ) {\n    this.nbService.getRolesBasic().subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: (res) => {\n        this.roles = res.content || [];\n      },\n    });\n    this.createUserForm = this.formBuilder.group({\n      name: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(45),\n          Validators.pattern(/^[a-zA-Z0-9.\\s]+$/),\n        ])\n      ),\n      username: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(/^[a-zA-Z0-9]+$/),\n          Validators.minLength(4),\n          Validators.maxLength(20),\n        ])\n      ),\n      password: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n      role: this.formBuilder.control(''),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  addRoleToList() {\n    const roleValue = this.createUserForm.get('role')?.value;\n    if (!roleValue) {\n      return;\n    }\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.roles.splice(indexOfRole, 1);\n    this.rolesList.push(roleValue);\n    this.createUserForm.get('role')?.setValue('');\n  }\n\n  removeRoleToList(role: BasicRole) {\n    const roleValue = role;\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.rolesList.splice(indexOfRole, 1);\n    this.roles.push(roleValue);\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  createUser(createUserData: {\n    name: string;\n    username: string;\n    password: string;\n    role: string | undefined;\n  }) {\n    createUserData.role = undefined;\n    this.dialogRef.disableClose = true;\n    this.nbService\n      .createUser({ ...createUserData, roles: this.rolesList })\n      .subscribe({\n        error: (err) => {\n          this.dialogRef.disableClose = false;\n          if (err.error) {\n            this.errorMessage = err.error.message;\n          } else {\n            this.errorMessage = 'Unknown Error';\n          }\n        },\n        next: () => {\n          this.dialogRef.close(true);\n        },\n      });\n  }\n}\n","<h2 mat-dialog-title>Create User</h2>\n<form\n  [formGroup]=\"createUserForm\"\n  (ngSubmit)=\"createUser(createUserForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" name=\"name\" required />\n      <mat-hint>Put your name</mat-hint>\n    </mat-form-field>\n    <mat-form-field class=\"forms-field\" appearance=\"fill\">\n      <mat-label>Username</mat-label>\n      <input\n        matInput\n        placeholder=\"admin01\"\n        formControlName=\"username\"\n        name=\"username\"\n        required\n      />\n      <mat-hint>Your username</mat-hint>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>Password</mat-label>\n      <input\n        formControlName=\"password\"\n        name=\"password\"\n        matInput\n        [type]=\"hidePassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hidePassword = !hidePassword\"\n        [attr.aria-label]=\"'hidePassword password'\"\n        [attr.aria-pressed]=\"hidePassword\"\n      >\n        <mat-icon>{{\n          hidePassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your password</mat-hint>\n    </mat-form-field>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>Select A Role</mat-label>\n        <mat-select name=\"role\" formControlName=\"role\">\n          <mat-option [value]=\"role\" *ngFor=\"let role of roles\">{{\n            role.identifier\n          }}</mat-option>\n        </mat-select>\n        <mat-hint>Select a role and add it</mat-hint>\n      </mat-form-field>\n      <button type=\"button\" (click)=\"addRoleToList()\" mat-stroked-button>\n        +\n      </button>\n    </div>\n    <div *ngFor=\"let role of rolesList\" class=\"roles-list\">\n      <div class=\"role-title\">\n        <h3>{{ role.identifier }}</h3>\n      </div>\n      <button\n        (click)=\"removeRoleToList(role)\"\n        color=\"warn\"\n        type=\"button\"\n        mat-stroked-button\n      >\n        -\n      </button>\n    </div>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!createUserForm.valid || rolesList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Create\n    </button>\n  </div>\n</form>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  BasicRole,\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-add-user-roles',\n  templateUrl: './add-user-roles.component.html',\n  styleUrls: ['./add-user-roles.component.scss'],\n})\nexport class AddUserRolesComponent implements OnInit {\n  addRolesForm: FormGroup;\n  errorMessage!: string;\n  errorMessageRoles!: string;\n  roles: BasicRole[] = [];\n  rolesList: BasicRole[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<AddUserRolesComponent>,\n    private formBuilder: FormBuilder,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.nbService.getRolesBasic().subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: (res) => {\n        const availableRoles = res.content?.flatMap((c) => {\n          const roleExist = user.roles.findIndex((r) => c.id == r.id) as number;\n          if (roleExist === -1) {\n            return c;\n          }\n          this.rolesList.push(c);\n          return [];\n        });\n        this.roles = availableRoles || [];\n      },\n    });\n    this.addRolesForm = this.formBuilder.group({\n      role: this.formBuilder.control(''),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  addRoleToList() {\n    const roleValue = this.addRolesForm.get('role')?.value;\n    if (!roleValue) {\n      return;\n    }\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.roles.splice(indexOfRole, 1);\n    this.rolesList.push(roleValue);\n    this.addRolesForm.get('role')?.setValue('');\n  }\n\n  removeRoleToList(role: BasicRole) {\n    const roleValue = role;\n    const indexOfRole = this.roles.indexOf(roleValue);\n    this.rolesList.splice(indexOfRole, 1);\n    this.roles.push(roleValue);\n  }\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  updateRoles() {\n    const rolesListToSend = this.rolesList.flatMap((rl) => {\n      const roleExist = this.user.roles.findIndex(\n        (r) => rl.id == r.id\n      ) as number;\n      if (roleExist === -1) {\n        return rl;\n      }\n      return [];\n    });\n    if (rolesListToSend.length === 0) {\n      return this.dialogRef.close(false);\n    }\n    this.nbService.updateUserRoles(this.user.id, rolesListToSend).subscribe({\n      error: (err) => {\n        if (err.error) {\n          this.errorMessage = err.error.message;\n        } else {\n          this.errorMessage = 'Unknown Error';\n        }\n        this.roles = [];\n      },\n      next: () => {\n        this.dialogRef.close(true);\n      },\n    });\n  }\n}\n","<h2 mat-dialog-title>Modify roles of {{ user.name }}</h2>\n<form [formGroup]=\"addRolesForm\" (ngSubmit)=\"updateRoles()\">\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <div class=\"select-role\">\n      <mat-form-field class=\"forms-field\" appearance=\"fill\">\n        <mat-label>Select A Role</mat-label>\n        <mat-select name=\"role\" formControlName=\"role\">\n          <mat-option [value]=\"role\" *ngFor=\"let role of roles\">{{\n            role.identifier\n          }}</mat-option>\n        </mat-select>\n        <mat-hint>Select a role and add it</mat-hint>\n      </mat-form-field>\n      <button type=\"button\" (click)=\"addRoleToList()\" mat-stroked-button>\n        +\n      </button>\n    </div>\n    <div *ngFor=\"let role of rolesList\" class=\"roles-list\">\n      <div class=\"role-title\">\n        <h3>{{ role.identifier }}</h3>\n      </div>\n      <button\n        (click)=\"removeRoleToList(role)\"\n        color=\"warn\"\n        type=\"button\"\n        mat-stroked-button\n      >\n        -\n      </button>\n    </div>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!addRolesForm.valid || rolesList.length === 0\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import {\n  NodebootOauth2StarterService,\n  User,\n  // User,\n} from './../nodeboot-oauth2-starter.service';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport {\n  BehaviorSubject,\n  Subscription,\n  merge,\n  startWith,\n  switchMap,\n  catchError,\n  of,\n  map,\n  first,\n} from 'rxjs';\nimport { ViewUserRolesComponent } from './view-user-roles/view-user-roles.component';\nimport { CreateUserComponent } from './create-user/create-user.component';\nimport { AddUserRolesComponent } from './add-user-roles/add-user-roles.component';\nimport { DeleteUserComponent } from './delete-user/delete-user.component';\nimport { UpdateUserComponent } from './update-user/update-user.component';\n\n@Component({\n  selector: 'lib-oauth-starter-users',\n  templateUrl: './oauth-starter-users.component.html',\n  styleUrls: ['./oauth-starter-users.component.scss'],\n})\nexport class OauthStarterUsersComponent implements OnDestroy, AfterViewInit {\n  users!: User[];\n  errorMessage!: string | undefined;\n  displayedColumns: string[] = ['id', 'name', 'username', 'roles', 'edit'];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n\n  reload = new BehaviorSubject<number>(0);\n\n  userDataSubscription!: Subscription;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(\n    private nbService: NodebootOauth2StarterService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userDataSubscription?.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n    this.userDataSubscription = merge(\n      this.sort.sortChange,\n      this.paginator.page,\n      this.reload\n    )\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.errorMessage = undefined;\n          this.isLoadingResults = true;\n          return this.nbService!.getUsers(\n            this.paginator.pageIndex,\n            this.sort.direction\n          ).pipe(\n            catchError((err) => {\n              if (err.error) {\n                this.errorMessage = err.error.message;\n              } else {\n                this.errorMessage = 'Unknown Error';\n              }\n              return of(null);\n            })\n          );\n        }),\n        map((data) => {\n          this.isLoadingResults = false;\n          if (data === null) {\n            return [];\n          }\n          this.resultsLength = data.content?.totalItems || 0;\n          return data.content?.items || [];\n        })\n      )\n      .subscribe((data) => {\n        this.users = data;\n      });\n  }\n\n  // ngOnInit(): void {}\n\n  openCreateUserDialog() {\n    const createUserDialogRef = this.dialog.open(CreateUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n    });\n    createUserDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openViewRolesDialog(user: User) {\n    this.dialog.open(ViewUserRolesComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n  }\n\n  openDialogDeleteUser(user: User) {\n    const updateRolesDialogRef = this.dialog.open(DeleteUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateRolesDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openUpdateRolesDialog(user: User) {\n    const updateRolesDialogRef = this.dialog.open(AddUserRolesComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateRolesDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n\n  openUpdateUserDialog(user: User) {\n    const updateUserDialogRef = this.dialog.open(UpdateUserComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: user,\n    });\n\n    updateUserDialogRef\n      .afterClosed()\n      .pipe(first())\n      .subscribe({\n        next: (res) => {\n          if (res) {\n            this.reload.next(this.reload.value + 1);\n          }\n        },\n      });\n  }\n}\n","<div class=\"user-container\">\n  <div class=\"users-head\">\n    <h1 class=\"user-title\">Users</h1>\n    <span class=\"separator\"></span>\n    <button (click)=\"openCreateUserDialog()\" color=\"accent\" mat-flat-button>\n      Add User\n    </button>\n  </div>\n  <div class=\"user-body\">\n    <div class=\"container-table mat-elevation-z8\">\n      <div class=\"loading-shade\" *ngIf=\"isLoadingResults\">\n        <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n      </div>\n\n      <div class=\"example-table-container\">\n        <table\n          mat-table\n          [dataSource]=\"users\"\n          class=\"user-table\"\n          matSort\n          matSortActive=\"id\"\n          matSortDisableClear\n          matSortDirection=\"asc\"\n        >\n          <ng-container matColumnDef=\"id\">\n            <th mat-sort-header mat-header-cell *matHeaderCellDef>id</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef>Name</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef>Username</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.username }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"roles\">\n            <th mat-header-cell *matHeaderCellDef>Roles</th>\n            <td class=\"roles-column\" mat-cell *matCellDef=\"let row\">\n              <button (click)=\"openViewRolesDialog(row)\" mat-stroked-button>\n                View Roles\n              </button>\n              <button\n                [disabled]=\"row.username === 'admin'\"\n                (click)=\"openUpdateRolesDialog(row)\"\n                mat-stroked-button\n              >\n                Update Roles\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"actions-column\" mat-cell *matCellDef=\"let row\">\n              <button\n                color=\"primary\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openUpdateUserDialog(row)\"\n              >\n                Edit User\n              </button>\n              <button\n                color=\"warn\"\n                [disabled]=\"row.username === 'admin'\"\n                mat-stroked-button\n                (click)=\"openDialogDeleteUser(row)\"\n              >\n                Delete User\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n        </table>\n      </div>\n\n      <mat-paginator\n        [length]=\"resultsLength\"\n        [pageSize]=\"20\"\n        aria-label=\"Select page of GitHub search results\"\n      ></mat-paginator>\n    </div>\n  </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../../nodeboot-oauth2-starter.service';\n\n@Component({\n  selector: 'lib-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n})\nexport class ChangePasswordComponent implements OnInit {\n  changePasswordForm: FormGroup;\n  errorMessage!: string;\n\n  hideNewPassword = true;\n  hideOldPassword = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public dialogRef: MatDialogRef<ChangePasswordComponent>,\n    private nbService: NodebootOauth2StarterService,\n    @Inject(MAT_DIALOG_DATA) public user: User\n  ) {\n    this.changePasswordForm = this.formBuilder.group({\n      oldPassword: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n      newPassword: this.formBuilder.control(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[A-Z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[0-9]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.pattern(\n            /^[a-zA-Z0-9\\d@$!%*#?&]*[a-z]+[a-zA-Z0-9\\d@$!%*#?&]*$/\n          ),\n          Validators.minLength(6),\n        ])\n      ),\n    });\n  }\n\n  ngOnInit(): void {}\n\n  closeDialog() {\n    this.dialogRef.close();\n  }\n\n  changePassword(updatePasswordData: {\n    oldPassword: string;\n    newPassword: string;\n  }) {\n    this.nbService\n      .updatePassword(\n        this.user.id,\n        updatePasswordData.newPassword,\n        updatePasswordData.oldPassword\n      )\n      .subscribe({\n        error: (err) => {\n          this.dialogRef.disableClose = false;\n          if (err.error) {\n            this.errorMessage = err.error.message;\n          } else {\n            this.errorMessage = 'Unknown Error';\n          }\n        },\n        next: () => {\n          this.dialogRef.close(true);\n        },\n      });\n  }\n}\n","<h2 mat-dialog-title>Change Password</h2>\n<form\n  [formGroup]=\"changePasswordForm\"\n  (ngSubmit)=\"changePassword(changePasswordForm.value)\"\n>\n  <div mat-dialog-content>\n    <div class=\"error-display\" *ngIf=\"errorMessage\">\n      <h5>{{ errorMessage }}</h5>\n    </div>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>Old Password</mat-label>\n      <input\n        formControlName=\"oldPassword\"\n        name=\"oldPassword\"\n        matInput\n        [type]=\"hideOldPassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hideOldPassword = !hideOldPassword\"\n        [attr.aria-label]=\"'hideOldPassword password'\"\n        [attr.aria-pressed]=\"hideOldPassword\"\n      >\n        <mat-icon>{{\n          hideOldPassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your current password</mat-hint>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"forms-field\">\n      <mat-label>New Password</mat-label>\n      <input\n        formControlName=\"newPassword\"\n        name=\"newPassword\"\n        matInput\n        [type]=\"hideNewPassword ? 'password' : 'text'\"\n        required\n      />\n      <button\n        type=\"button\"\n        mat-icon-button\n        matSuffix\n        (click)=\"hideNewPassword = !hideNewPassword\"\n        [attr.aria-label]=\"'hideOldPassword password'\"\n        [attr.aria-pressed]=\"hideNewPassword\"\n      >\n        <mat-icon>{{\n          hideNewPassword ? \"visibility_off\" : \"visibility\"\n        }}</mat-icon>\n      </button>\n      <mat-hint>Put your new password</mat-hint>\n    </mat-form-field>\n  </div>\n  <div align=\"end\" mat-dialog-actions>\n    <button\n      (click)=\"closeDialog()\"\n      type=\"button\"\n      color=\"warn\"\n      mat-stroked-button\n      [disabled]=\"dialogRef.disableClose\"\n    >\n      Cancel</button\n    ><button\n      [disabled]=\"!changePasswordForm.valid\"\n      color=\"primary\"\n      mat-flat-button\n    >\n      Update\n    </button>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  NodebootOauth2StarterService,\n  User,\n} from '../nodeboot-oauth2-starter.service';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\n\n@Component({\n  selector: 'lib-oauth-starter-user-profile',\n  templateUrl: './oauth-starter-user-profile.component.html',\n  styleUrls: ['./oauth-starter-user-profile.component.scss'],\n})\nexport class OauthStarterUserProfileComponent implements OnInit {\n  user!: User;\n\n  constructor(\n    private nbService: NodebootOauth2StarterService,\n    public dialog: MatDialog\n  ) {\n    this.nbService.getUserProfile().subscribe({\n      next: (res) => {\n        this.user = res.content as User;\n        console.log(res);\n      },\n    });\n  }\n\n  ngOnInit(): void {}\n\n  openChangePasswordDialog() {\n    this.dialog.open(ChangePasswordComponent, {\n      width: '600px',\n      maxHeight: '70vh',\n      data: this.user,\n    });\n  }\n}\n","<div class=\"profile-container\" *ngIf=\"user\">\n  <div class=\"header\">\n    <h1>{{ user.name }} Profile</h1>\n    <h4>#{{ user.id }}</h4>\n  </div>\n  <section>\n    <h3>Roles</h3>\n    <mat-accordion>\n      <mat-expansion-panel *ngFor=\"let role of user.roles\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            #{{ role.id }} | Role Name: {{ role.identifier }}\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-list role=\"list\">\n          <mat-list-item *ngFor=\"let part of role.parts\" role=\"listitem\"\n            >{{ part.applicationPartName }} | Options:\n            {{ part.allowed.join(\",\") }}</mat-list-item\n          >\n        </mat-list>\n      </mat-expansion-panel>\n    </mat-accordion>\n    <div class=\"actions\">\n      <button\n        type=\"button\"\n        (click)=\"openChangePasswordDialog()\"\n        mat-flat-button\n        color=\"accent\"\n      >\n        Change Password\n      </button>\n    </div>\n  </section>\n</div>\n","import { DeleteUserComponent } from './oauth-starter-users/delete-user/delete-user.component';\nimport { UpdateUserComponent } from './oauth-starter-users/update-user/update-user.component';\nimport { NgModule } from '@angular/core';\nimport { NodebootOauth2StarterComponent } from './nodeboot-oauth2-starter.component';\nimport { LibraryMaterials } from './material.module';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OauthStarterUsersComponent } from './oauth-starter-users/oauth-starter-users.component';\nimport { ViewUserRolesComponent } from './oauth-starter-users/view-user-roles/view-user-roles.component';\nimport { CreateUserComponent } from './oauth-starter-users/create-user/create-user.component';\nimport { AddUserRolesComponent } from './oauth-starter-users/add-user-roles/add-user-roles.component';\nimport { OauthStarterUserProfileComponent } from './oauth-starter-user-profile/oauth-starter-user-profile.component';\nimport { ChangePasswordComponent } from './oauth-starter-user-profile/change-password/change-password.component';\n\n@NgModule({\n  declarations: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    OauthStarterUserProfileComponent,\n    ViewUserRolesComponent,\n    CreateUserComponent,\n    UpdateUserComponent,\n    DeleteUserComponent,\n    AddUserRolesComponent,\n    ChangePasswordComponent,\n  ],\n  imports: [\n    LibraryMaterials,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    NodebootOauth2StarterComponent,\n    OauthStarterUsersComponent,\n    OauthStarterUserProfileComponent,\n  ],\n})\nexport class NodebootOauth2StarterModule {}\n","/*\n * Public API Surface of nodeboot-oauth2-starter\n */\n\nexport * from './lib/nodeboot-oauth2-starter.service';\nexport * from './lib/nodeboot-oauth2-starter.component';\nexport * from './lib/nodeboot-oauth2-starter.module';\nexport * from './lib/oauth-starter-users/oauth-starter-users.component';\nexport * from './lib/oauth-starter-user-profile/oauth-starter-user-profile.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}